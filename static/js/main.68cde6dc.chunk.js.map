{"version":3,"sources":["App/MapContainer/MapRow/red_robot_128.svg","App/MapContainer/MapRow/blue_robot_128.svg","util.js","actions/index.js","reducers/boardReducer.js","reducers/index.js","FieldFileInput/FieldFileInput.js","App/Header/Header.js","App/MapContainer/MapRow/MapTile/MapTile.js","App/MapContainer/MapRow/MapRow.js","App/MapContainer/MapContainer.js","App/MovesListContainer/MovesListContainer.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MOVE","TAKE","SPAWN","N","NE","NW","S","SE","SW","E","W","TILE","isBetween","lower","upper","x","arrayBufferToString","buf","String","fromCharCode","apply","Uint16Array","processMove","board","move","forward","produce","newBoard","type","command","team","handle","direction","robot","robots","find","bot","_directionToCoordinat","directionToCoordinates","_directionToCoordinat2","Object","slicedToArray","dx","dy","_robot$xy","xy","y","fromTile","map","_ref","width","height","toTile","wormHistory","push","out","teams","gold","lastDeposit","lastIsWorm","pop","lastDepo","undefined","console","log","amount","_robot$xy2","_directionToCoordinat3","_directionToCoordinat4","tile","concat","toConsumableArray","bases","filter","SEQUENTIAL_MOVE_ACTION","MOVE_ACTION","LOAD_FILE_ACTION","runSequentialMove","next","arguments","length","payload","loadFile","file","fileReadHandle","Promise","resolve","reject","reader","FileReader","onloadend","text","result","ArrayBuffer","JSON","parse","onerror","readAsBinaryString","initialState","adjustXY","_ref2","getBases","i","row","j","elem","squarify","squareMap","column","rootReducer","combineReducers","state","action","_action$payload","maxGold","max_gold","maxBots","max_bots","moves","squaredMap","testBots","teamsWithScores","forEach","teamNames","nextMove","_action$payload2","nextOrPrevious","moveToExecute","newState","objectSpread","FieldFileInput","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","e","target","files","_this$props","label","types","react_default","a","createElement","id","accept","Component","Header","input","FieldFileInput_FieldFileInput","className","key","keys","connect","_ref$board","dispatch","bindActionCreators","MapTile","style","toLowerCase","contents","cost","bots","src","redBot","alt","blueBot","typeClass","MapRow","tiles","robotsByTile","Array","index","MapContainer","robotsByRow","rows","mapRow","MovesListContainer","movesList","classes","classNames","move-element","past-move","next-move","stringify","moveToString","App","_this2","totalMoves","App_Header_Header","flex","App_MapContainer_MapContainer","overflowY","overflowX","App_MovesListContainer_MovesListContainer","onClick","disabled","Boolean","window","location","hostname","match","store","createStore","reducers","composeWithDevTools","applyMiddleware","ReduxPromise","ReactDOM","render","es","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68cde6dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/red_robot_128.168b46bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue_robot_128.74e0a7af.svg\";","import produce from 'immer';\n\nexport const DIRECTION = {\n    FORWARD: \"FORWARD\",\n    BACKWARD: \"BACKWARD\"\n};\n\nexport const MOVE = {\n    TYPE: {\n        TAKE: \"Take\",\n        MOVE: \"Move\",\n        SPAWN: \"Spawn\"\n    },\n    DIRECTION: {\n        N: \"N\",\n        NE: \"NE\",\n        NW: \"NW\",\n        S: \"S\",\n        SE: \"SE\",\n        SW: \"SW\",\n        E: \"E\",\n        W: \"W\"\n    }\n};\n\nexport const TILE = {\n    BASE: \"B\",\n    WALL: \"W\",\n    PATH: \"P\",\n    GOLD: \"G\",\n    WORM: \"Worm\"\n};\n\nexport const pending = name => name + \"_PENDING\";\nexport const fulfilled = name => name + \"_FULFILLED\";\nexport const rejected = name => name + \"_REJECTED\";\n\n\nconst isBetween = (lower, upper, x) => lower <= x && x <= upper;\n\n// AAAAAAAAAAAAAAAAAAAAAAAAAAAA\nexport const arrayBufferToString = buf =>\n    String.fromCharCode.apply(null, new Uint16Array(buf));\n\n/**\n * Execute a runMove in a given direction (forwards or backwards), generating the new board state.\n *\n * @param board The board state.\n * @param move The runMove to execute.\n * @param forward Whether the runMove should be done forwards or backwards (undo).\n *\n * @return {*} The new board state, after executing the runMove.\n */\nexport const processMove = (board, move, forward) => {\n    return produce(board, newBoard => {\n        const {command: type, team, handle} = move;\n        switch (type) {\n            case MOVE.TYPE.MOVE: {\n                // move robot\n\n                const {direction} = move,\n                    robot = newBoard.robots.find(bot => bot.handle === handle);\n\n                let [dx, dy] = directionToCoordinates(direction),\n                    [x, y] = robot.xy,\n                    fromTile = newBoard.map[y][x];\n\n                // if the move is backwards, we invert the co-ordinate changes\n                if (!forward) {\n                    [dx, dy] = [-dx, -dy];\n                }\n\n                // update co-ordinates, checking bounds\n                if (isBetween(0, newBoard.width - 1, x + dx)\n                    && isBetween(0, newBoard.height, y + dy)) {\n                    robot.xy = [x + dx, y + dy];\n                }\n\n                let toTile = newBoard.map[robot.xy[1]][robot.xy[0]];\n\n                if (forward) {\n                    //forward stepping\n                    if (toTile === TILE.WORM) {\n                        //moving towards wormhole\n                        //ASSUMPTION: wormhole only leads to paths\n                        robot.wormHistory.push(robot.xy); //add wormhole pos to history\n                        robot.xy = toTile.out;\n                    } else if (toTile === TILE.BASE) {\n                        //moving towards homebase\n                        let team = toTile.team;\n                        //add robot's gold to the base team\n                        newBoard.teams[team] += robot.gold;\n                        robot.lastDeposit.push(robot.gold);\n                        robot.gold = 0;\n                        robot.wormHistory.push([-1, -1]); //not from wormhole\n                    } else {\n                        robot.wormHistory.push([-1, -1]); //not from wormhole\n                    }\n                } else {\n                    //back stepping\n                    let lastIsWorm = robot.wormHistory.pop();\n                    if (lastIsWorm[0] !== -1 && lastIsWorm[1] !== -1) {\n                        //back stepping for wormhole\n                        robot.xy = [lastIsWorm[0] + dx][lastIsWorm[-1] + dy];\n                    } else if (fromTile === TILE.BASE) {\n                        //stepping back from base\n                        let lastDepo = robot.lastDeposit.pop();\n                        if (lastDepo !== undefined) {\n                            newBoard.teams[fromTile.team] -= lastDepo;\n                            robot.gold += lastDepo;\n                        } else {\n                            //should not happen\n                            console.log(\"stepping back with undefined last deposit\");\n                        }\n                    }\n                }\n\n                break;\n            }\n            case MOVE.TYPE.TAKE: {\n                // take/return gold\n                const {direction, amount} = move,\n                    robot = board.robots[handle],\n                    [x, y] = robot.xy,\n                    [dx, dy] = directionToCoordinates(direction),\n                    tile = board.map[y + dy][x + dx];\n\n                if (tile.type === TILE.GOLD) {\n                    if (forward) {\n                        // take some gold from the pile, if there's any left\n                        if (amount > 0) {\n                            // move gold from pile into the team's score counter\n                            tile.amount -= amount;\n                            robot.gold += amount;\n                        }\n                    } else {\n                        // return gold to pile\n                        tile.amount += amount;\n                        robot.gold -= amount;\n                    }\n                }\n                break;\n            }\n            case MOVE.TYPE.SPAWN: {\n                if (forward) {\n                    // spawn new robot\n                    newBoard.robots = [...newBoard.robots, {\n                        handle,\n                        team,\n                        xy: newBoard.bases[team], // spawn at the home base location\n                        gold: 0,\n                        lastDeposit: [],\n                        wormHistory: []\n                    }]\n                } else {\n                    // delete existing robot\n                    newBoard.robots = newBoard.robots.filter(robot => robot.handle !== handle);\n                }\n                break;\n            }\n            default:\n            // aaaaaaaaa\n        }\n    });\n};\n\nconst directionToCoordinates = direction => {\n    // [dx, dy]\n    switch (direction) {\n        case MOVE.DIRECTION.N:\n            return [0, -1];\n        case MOVE.DIRECTION.NE:\n            return [1, -1];\n        case MOVE.DIRECTION.NW:\n            return [-1, -1];\n        case MOVE.DIRECTION.S:\n            return [0, 1];\n        case MOVE.DIRECTION.SE:\n            return [1, 1];\n        case MOVE.DIRECTION.SW:\n            return [-1, 1];\n        case MOVE.DIRECTION.E:\n            return [1, 0];\n        case MOVE.DIRECTION.W:\n            return [-1, 0];\n        default:\n            return [0, 0]; // ??????\n    }\n};\n\n/**\n * Convert a board move to a *concise* string representation that can be shown to the user.\n *\n * @param move The move data.\n * @return {string} The string representation.\n */\nexport const moveToString = move => JSON.stringify(move); // TODO: implement this\n\nexport const adjustXY = (width, height) => {\n    return ([x, y]) => [];\n};","import {arrayBufferToString} from \"../util\";\n\nexport const SEQUENTIAL_MOVE_ACTION = \"SMOVE\";\nexport const MOVE_ACTION = \"MOVE\";\nexport const LOAD_FILE_ACTION = \"LOAD_FILE\";\n\nexport function runSequentialMove(next = true) {\n    return {\n        type: SEQUENTIAL_MOVE_ACTION,\n        payload: {next}\n    };\n}\n\nexport function runMove(forward, move) {\n    return {\n        type: MOVE_ACTION,\n        payload: {forward, move}\n    };\n}\n\nexport function loadFile(file) {\n    const fileReadHandle = new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            const text = reader.result instanceof ArrayBuffer ? arrayBufferToString(reader.result) : reader.result;\n            resolve(JSON.parse(text));\n        };\n        reader.onerror = () => reject();\n        reader.readAsBinaryString(file);\n    });\n\n    return {\n        type: LOAD_FILE_ACTION,\n        payload: fileReadHandle\n    }\n}","import {fulfilled, processMove, TILE} from \"../util\";\nimport {LOAD_FILE_ACTION, MOVE_ACTION, SEQUENTIAL_MOVE_ACTION} from \"../actions\";\n\n// TODO: document board object schema\n\nconst initialState = {\n    // map: [],\n    // maxGold: 0,\n    // maxBots: 0,\n    // width: 0,\n    // height: 0,\n    // teams: [],\n    // teamNames: [],\n    // bases: {},\n    // robots: {}\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case fulfilled(LOAD_FILE_ACTION): {\n            // load new map\n            const {map, width, height, teams, max_gold: maxGold, max_bots: maxBots, moves} = action.payload,\n                squaredMap = squarify(map, height, width),\n                bases = getBases(squaredMap),\n                // for testing: delete after processMove is done.\n                testBots = [\n                    {handle: 0, team: \"Red\", xy: bases[\"Red\"], gold: 0, lastDeposit: [], wormHistory: []},\n                    {handle: 1, team: \"Blue\", xy: bases[\"Blue\"], gold: 0, lastDeposit: [], wormHistory: []},\n                ],\n                teamsWithScores = {};\n            teams.forEach(team => teamsWithScores[team] = 0);\n            return {\n                map: squaredMap,\n                maxGold,\n                maxBots,\n                width,\n                height,\n                teams: teamsWithScores,\n                teamNames: teams,\n                bases,\n                robots: testBots, // no robots at the start\n                moves,\n                nextMove: 0\n            };\n        }\n        case MOVE_ACTION:\n            // make a move!\n            const {forward, move} = action.payload;\n            return processMove(state, move, forward);\n        case SEQUENTIAL_MOVE_ACTION:\n            const {next: nextOrPrevious} = action.payload,\n                {moves, nextMove} = state;\n            const moveToExecute = nextOrPrevious ? moves[nextMove] : moves[nextMove - 2],\n                newState = {\n                    ...state,\n                    moves: state.moves,\n                    nextMove: nextOrPrevious ? nextMove + 1 : nextMove - 1 // mfw\n                };\n            return processMove(newState, moveToExecute, nextOrPrevious);\n        default:\n            return state\n    }\n}\n\nconst adjustXY = (width, height, [x, y]) => [height - x - 1, width - y - 1];\n\n/**\n * Get all the team home base locations from a map.\n *\n * @param map The map.\n * @return An object mapping team names to home base locations.\n */\nconst getBases = map => {\n    const bases = {},\n        width = map.length,\n        height = map[0].length;\n    for (let i = 0; i < map.length; i++) {\n        const row = map[i];\n        for (let j = 0; j < row.length; j++) {\n            const elem = row[j];\n            if (elem.type === TILE.BASE) {\n                bases[elem.team] = adjustXY(width, height, [j, i]);\n            }\n        }\n    }\n    return bases;\n};\n\n/**\n * Convert a 1-dimensional representation with a given width into a 2-dimensional representation. Note that the mapping\n * goes row-by-row, not column-by-column, i.e. if the width is {@code n}, then the first {@code n} cells represent the\n * first row of the 2D representation.\n *\n * @param map The array.\n * @param height The height of the 2D representation.\n * @param width The width of the 2D representation.\n * @return {Array} The 2D representation.\n */\nconst squarify = (map, height, width) => {\n    const squareMap = [];\n    let row = 0, column = 0;\n    for (let i = 0; i < map.length; i++) {\n        if (squareMap[row] === void 0) {\n            squareMap[row] = [];\n        }\n        squareMap[row][column] = map[i];\n\n        // if (column < width - 1) {\n        //     column++;\n        // } else {\n        //     column = 0;\n        //     row++;\n        // }\n        if (row < height - 1) {\n            row++;\n        } else {\n            column++;\n            row = 0;\n        }\n    }\n    return squareMap;\n};","import {combineReducers} from 'redux';\nimport boardReducer from \"./boardReducer\";\n\nconst rootReducer = combineReducers({\n    board: boardReducer\n});\n\nexport default rootReducer;","import React, {Component} from 'react';\n\nexport default class FieldFileInput extends Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        const { onChange } = this.props,\n            file = e.target.files[0];\n        // console.log(file);\n        onChange(file);\n    }\n\n    render() {\n        const { label, types } = this.props;\n        return (\n            <div>\n                <div id=\"section-head\">{label}</div>\n                <div>\n                    <input\n                        type='file'\n                        accept={types}\n                        onChange={this.onChange}\n                    />\n                </div>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport FieldFileInput from \"../../FieldFileInput\";\nimport {loadFile} from \"../../actions\";\nimport {bindActionCreators} from \"redux\";\n\nimport \"./style.css\";\n\nclass Header extends Component {\n    render() {\n        /*  teams: a list of all the teams\n            scores: a list of the current scores for each team in order of the teams list\n            bots: a list of num of bots for the teams in order of teams list\n            goldcap: an int that represents the gold cap per bot\n            moves: all moves\n            next: next index of move\n        */\n        const {teamNames, teams, maxGold, moves, next} = this.props;\n        const input = <FieldFileInput className=\"header-item\"\n                                      label={\"Import\"}\n                                      types={\".json\"}\n                                      onChange={this.props.loadFile}/>;\n        if (teamNames === void 0) {\n            return (\n                <div id=\"header-container\">\n                    {input}\n                </div>\n            );\n        }\n        return (\n            <div id=\"header-container\">\n                {input}\n                <div className=\"header-item\" id=\"Score\">\n                    <div className=\"section-head\" key={-1}>Scores</div>\n\n                    {Object.keys(teams).map((team, i) =>\n                        <div className=\"score-item\" key={i}>\n                            Team {team}: {teams[team]}\n                        </div>\n                    )}\n                </div>\n\n                {/* <div className=\"header-item\" id=\"NumBots\">{numBots}</div> */}\n                <div className=\"header-item\" id=\"MovesLeft\">\n                    <div className=\"section-head\" key={\"gold\"}>Gold Cap: {maxGold}</div>\n                    <div className=\"section-head\" key={\"move-head\"}>Moves Left:</div>\n                    <div id=\"MovesCounter\" key=\"move\">{next} / {moves.length}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({board: {teamNames, maxGold, maxBots, teams, robots, moves, nextMove}}) => {\n    return {\n        teamNames, teams, robots, maxGold, maxBots, moves, nextMove\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return bindActionCreators({\n        loadFile\n    }, dispatch);\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React from 'react';\nimport \"../style.css\";\nimport {TILE} from \"../../../../util\";\n\nimport redBot from '../red_robot_128.svg';\nimport blueBot from '../blue_robot_128.svg';\n\nexport default ({tile, robots}) => {\n    const {type} = tile,\n        style = {};\n    if (type === TILE.BASE) {\n        style[\"border\"] = `1px solid ${tile.team.toLowerCase()}`; // TODO make this nicer!\n    }\n\n    let contents = \"\";\n    if (type === TILE.GOLD) {\n        contents = tile.amount;\n    } else if (type === TILE.PATH) {\n        contents = tile.cost;\n    }\n\n    const bots = robots.map(({team, handle}) => {\n        if (team === \"Red\") {\n            return <img key={handle} className=\"bot-img\" src={redBot} alt=\"RBot\" />;\n        } else if (team === \"Blue\") {\n            return <img key={handle} className=\"bot-img\" src={blueBot} alt=\"BBot\" />;\n        } else {\n            return null; // >:(\n        }\n    });\n\n    let typeClass = \"path\";\n    if (type === TILE.GOLD) {\n        typeClass = \"gold\";\n    } else if (type === TILE.BASE) {\n        typeClass = \"base\";\n    } else if (type === TILE.WORM) {\n        typeClass = \"worm\";\n    } else if (type === TILE.WALL) {\n        typeClass = \"wall\"\n    }\n\n\n    return (\n        <div style={style} className={`map-tile ${typeClass}`}>\n            {contents}\n            {bots}\n        </div>\n    )\n}","import React from 'react';\n\nimport MapTile from \"./MapTile\";\nimport \"./style.css\";\n\nexport default ({tiles, robots, y}) => {\n    const robotsByTile = Array(tiles.length);\n    for (let i = 0; i < tiles.length; i++) robotsByTile[i] = [];\n    robots.forEach(robot => {\n        const {xy: [x, ]} = robot;\n        robotsByTile[x].push(robot);\n    });\n    return (\n        <div className=\"map-row\">\n            {tiles.map((tile, index) =>\n                <MapTile key={index} tile={tile} robots={robotsByTile[index]} x={index} y={y}/>\n            )}\n        </div>\n    )\n}","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport MapRow from \"./MapRow\";\n\nclass MapContainer extends Component {\n    render() {\n        const { map, width, height, teams, bases, robots } = this.props;\n        if (map == null) { // double equals is intentional here, please don't change this\n            return (\n                <div id=\"map-container\">\n\n                </div>\n            )\n        }\n\n        const robotsByRow = Array(height);\n        for (let i = 0; i < height; i++) robotsByRow[i] = []; // have to do this manually as [] is an object\n        robots.forEach(robot => {\n            const {xy: [, y]} = robot;\n            robotsByRow[y].push(robot);\n        });\n\n        const rows = map.map((mapRow, index) => {\n            return <MapRow tiles={mapRow} key={index} robots={robotsByRow[index]} y={index}/>\n        });\n\n        return (\n            <div id=\"map-container\">\n                {rows}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({board: {map, width, height, teams, bases, robots}}) => {\n    return {\n        map, width, height, teams, bases, robots\n    };\n};\n\nexport default connect(mapStateToProps)(MapContainer);","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport {connect} from 'react-redux';\n\nimport {moveToString} from \"../../util\";\nimport \"./style.css\";\n\n\nclass MovesListContainer extends Component {\n    render() {\n        const {moves, nextMove} = this.props;\n        if (moves == null) { // double equals is intentional here, please don't change this\n            return (\n                <div id=\"moves-container\">\n\n                </div>\n            )\n        }\n\n        const movesList = moves.map((move, index) => {\n            const classes = classNames({\n                \"move-element\": true,\n                \"past-move\": index < nextMove,\n                \"next-move\": index === nextMove\n            });\n\n            if (index < nextMove) {\n                // don't render past moves :(\n                return null;\n            } else {\n                return <p key={index} className={classes}>{moveToString(move)}</p>\n            }\n        }).filter(elem => elem !== null);\n\n        return (\n            <div id=\"moves-container\">\n                {movesList}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({board: {moves, nextMove}}) => {\n    return {\n        moves, nextMove\n    };\n};\n\nexport default connect(mapStateToProps)(MovesListContainer);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport './App.css';\nimport Header from './Header';\nimport MapContainer from \"./MapContainer\";\nimport MovesListContainer from \"./MovesListContainer\";\nimport {bindActionCreators} from \"redux\";\nimport {runSequentialMove} from \"../actions\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n\n        };\n    }\n\n    render() {\n        let {height, nextMove, totalMoves} = this.props;\n        if (height === void 0) {\n            height = 0;\n        }\n\n        return (\n            <div className=\"App\">\n                <Header/>\n                <div id=\"data\" style={{height: 52 * height}}>\n                    <div style={{flex: 2}}>\n                        <MapContainer/>\n                    </div>\n                    <div style={{flex: \"1\", overflowY: \"scroll\", overflowX: \"auto\"}}>\n                        <MovesListContainer/>\n                    </div>\n                </div>\n                <button onClick={() => this.props.runSequentialMove(false)}\n                        disabled={nextMove === 0}>Previous Move</button>\n                <button onClick={() => this.props.runSequentialMove(true)}\n                        disabled={nextMove >= totalMoves}>Next Move</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({board: {height, nextMove, moves}}) => {\n    const totalMoves = typeof moves === \"undefined\" ? 0 : moves.length;\n    return {height, nextMove, totalMoves};\n};\n\n// for testing\n// TODO: remove this when done\nconst mapDispatchToProps = dispatch => {\n    return bindActionCreators({\n        runSequentialMove\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport ReduxPromise from \"redux-promise-middleware\";\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nimport reducers from './reducers';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, composeWithDevTools(\n    applyMiddleware(ReduxPromise),\n    // other store enhancers if any\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}