{"version":3,"sources":["App/MapContainer/MapRow/red_robot_128.svg","App/MapContainer/MapRow/blue_robot_128.svg","util.js","actions/index.js","reducers/boardReducer.js","reducers/index.js","reducers/initializedReducer.js","FieldFileInput/FieldFileInput.js","App/Header/Header.js","App/EditorGrid/EditorGrid.js","App/MapContainer/MapRow/MapTile/MapTile.js","App/MapContainer/MapRow/MapRow.js","App/MapContainer/MapContainer.js","App/MovesListContainer/MovesListContainer.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MOVE","TAKE","SPAWN","N","NE","NW","S","SE","SW","E","W","TILE","BASE","WALL","PATH","GOLD","WORM","fulfilled","name","isBetween","lower","upper","x","arrayBufferToString","buf","String","fromCharCode","apply","Uint16Array","processMove","board","move","forward","produce","newBoard","type","command","team","handle","direction","robot","robots","find","bot","_directionToCoordinat","directionToCoordinates","_directionToCoordinat2","Object","slicedToArray","dx","dy","_robot$xy","xy","y","fromTile","map","_ref","width","height","toTile","wormHistory","push","out","teams","gold","lastDeposit","lastIsWorm","pop","lastDepo","undefined","console","log","amount","_robot$xy2","_directionToCoordinat3","_directionToCoordinat4","tile","concat","toConsumableArray","bases","filter","SEQUENTIAL_MOVE_ACTION","LOAD_FILE_ACTION","runSequentialMove","next","arguments","length","payload","loadFile","file","fileReadHandle","Promise","resolve","reject","reader","FileReader","onloadend","text","result","ArrayBuffer","JSON","parse","onerror","readAsBinaryString","initialState","getBases","i","row","j","elem","squarify","squareMap","column","rootReducer","combineReducers","state","action","_action$payload","maxGold","max_gold","maxBots","max_bots","moves","squaredMap","teamsWithScores","forEach","teamNames","nextMove","_action$payload2","nextOrPrevious","moveToExecute","newState","objectSpread","initialized","FieldFileInput","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","e","target","files","_this$props","label","types","react_default","a","createElement","id","accept","Component","Header","input","FieldFileInput_FieldFileInput","className","key","keys","connect","_ref$board","dispatch","bindActionCreators","EditorGrid","showEditor","setState","show","changeParams","field","newValue","newCells","initCells","cells","grid","initGrids","lastgrid","forceUpdate","vision","end_goal","updateEditResult","pos","newGrid","cost","outy","outx","generateEditItem","editTile","form","inBounds","value","Number","reset","init_cells","newLastGrid","arr","slice","changeSelectedItem","selectedItem","generateToolBox","lst","items","_loop","classNames","onClick","getDifference","cells1","cells2","updateGrid","newGrids","export","redBaseFlag","blueBaseFlag","tileToJson","alert","obj","fileToSave","Blob","stringify","saveAs","w","h","table","currx","curry","cell","Type","_this2","lib_default","generateTable","MapTile","style","toLowerCase","contents","bots","_ref2","src","redBot","alt","blueBot","typeClass","MapRow","tiles","robotsByTile","Array","index","MapContainer","robotsByRow","rows","mapRow","MovesListContainer","movesList","classes","move-element","past-move","next-move","moveToString","App","totalMoves","App_Header_Header","flex","App_MapContainer_MapContainer","overflowY","overflowX","App_MovesListContainer_MovesListContainer","disabled","App_EditorGrid_EditorGrid","Boolean","window","location","hostname","match","Saga","createSagaMiddleware","store","createStore","reducers","composeWithDevTools","applyMiddleware","ReduxPromise","ReactDOM","render","es","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e1cbd21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/red_robot_128.168b46bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue_robot_128.74e0a7af.svg\";","import produce from 'immer';\n\nexport const DIRECTION = {\n    FORWARD: \"FORWARD\",\n    BACKWARD: \"BACKWARD\"\n};\n\nexport const MOVE = {\n    TYPE: {\n        TAKE: \"Take\",\n        MOVE: \"Move\",\n        SPAWN: \"Spawn\"\n    },\n    DIRECTION: {\n        N: \"N\",\n        NE: \"NE\",\n        NW: \"NW\",\n        S: \"S\",\n        SE: \"SE\",\n        SW: \"SW\",\n        E: \"E\",\n        W: \"W\"\n    }\n};\n\nexport const TILE = {\n    BASE: \"B\",\n    WALL: \"W\",\n    PATH: \"P\",\n    GOLD: \"G\",\n    WORM: \"Worm\"\n};\n\nexport const pending = name => name + \"_PENDING\";\nexport const fulfilled = name => name + \"_FULFILLED\";\nexport const rejected = name => name + \"_REJECTED\";\n\n\nconst isBetween = (lower, upper, x) => lower <= x && x <= upper;\n\n// AAAAAAAAAAAAAAAAAAAAAAAAAAAA\nexport const arrayBufferToString = buf =>\n    String.fromCharCode.apply(null, new Uint16Array(buf));\n\n/**\n * Execute a runMove in a given direction (forwards or backwards), generating the new board state.\n *\n * @param board The board state.\n * @param move The runMove to execute.\n * @param forward Whether the runMove should be done forwards or backwards (undo).\n *\n * @return {*} The new board state, after executing the runMove.\n */\nexport const processMove = (board, move, forward) => {\n    return produce(board, newBoard => {\n        const {command: type, team, handle} = move;\n        switch (type) {\n            case MOVE.TYPE.MOVE: {\n                // move robot\n\n                const {direction} = move,\n                    robot = newBoard.robots.find(bot => bot.handle === handle);\n\n                let [dx, dy] = directionToCoordinates(direction),\n                    [x, y] = robot.xy,\n                    fromTile = newBoard.map[y][x];\n\n                // if the move is backwards, we invert the co-ordinate changes\n                if (!forward) {\n                    [dx, dy] = [-dx, -dy];\n                }\n\n                // update co-ordinates, checking bounds\n                if (isBetween(0, newBoard.width - 1, x + dx)\n                    && isBetween(0, newBoard.height, y + dy)) {\n                    robot.xy = [x + dx, y + dy];\n                }\n\n                let toTile = newBoard.map[robot.xy[1]][robot.xy[0]];\n\n                if (forward) {\n                    //forward stepping\n                    if (toTile.type === TILE.WORM) {\n                        //moving towards wormhole\n                        //ASSUMPTION: wormhole only leads to paths\n                        robot.wormHistory.push(robot.xy); //add wormhole pos to history\n                        robot.xy = toTile.out;\n                    } else if (toTile.type === TILE.BASE) {\n                        //moving towards homebase\n                        let team = toTile.team;\n                        //add robot's gold to the base team\n                        newBoard.teams[team] += robot.gold;\n                        robot.lastDeposit.push(robot.gold);\n                        robot.gold = 0;\n                        robot.wormHistory.push([-1, -1]); //not from wormhole\n                    } else {\n                        robot.wormHistory.push([-1, -1]); //not from wormhole\n                    }\n                } else {\n                    //back stepping\n                    let lastIsWorm = robot.wormHistory.pop();\n                    if (lastIsWorm[0] !== -1 && lastIsWorm[1] !== -1) {\n                        //back stepping for wormhole\n                        robot.xy = [lastIsWorm[0] + dx][lastIsWorm[-1] + dy];\n                    } else if (fromTile === TILE.BASE) {\n                        //stepping back from base\n                        let lastDepo = robot.lastDeposit.pop();\n                        if (lastDepo !== undefined) {\n                            newBoard.teams[fromTile.team] -= lastDepo;\n                            robot.gold += lastDepo;\n                        } else {\n                            //should not happen\n                            console.log(\"stepping back with undefined last deposit\");\n                        }\n                    }\n                }\n\n                break;\n            }\n            case MOVE.TYPE.TAKE: {\n                // take/return gold\n                const {direction, amount} = move,\n                robot = newBoard.robots.find(bot => bot.handle === handle),\n                    [x, y] = robot.xy,\n                    [dx, dy] = directionToCoordinates(direction),\n                    tile = newBoard.map[y + dy][x + dx];\n\n                if (tile.type === TILE.GOLD) {\n                    if (forward) {\n                        // take some gold from the pile, if there's any left\n                        if (amount > 0) {\n                            // move gold from pile into the team's score counter\n                            tile.amount -= amount;\n                            robot.gold += amount;\n                        }\n                    } else {\n                        // return gold to pile\n                        tile.amount += amount;\n                        robot.gold -= amount;\n                    }\n                }\n                break;\n            }\n            case MOVE.TYPE.SPAWN: {\n                if (forward) {\n                    // spawn new robot\n                    newBoard.robots = [...newBoard.robots, {\n                        handle,\n                        team,\n                        xy: newBoard.bases[team], // spawn at the home base location\n                        gold: 0,\n                        lastDeposit: [],\n                        wormHistory: []\n                    }]\n                } else {\n                    // delete existing robot\n                    newBoard.robots = newBoard.robots.filter(robot => robot.handle !== handle);\n                }\n                break;\n            }\n            default:\n            // aaaaaaaaa\n        }\n    });\n};\n\nconst directionToCoordinates = direction => {\n    // [dx, dy]\n    switch (direction) {\n        case MOVE.DIRECTION.N:\n            return [0, -1];\n        case MOVE.DIRECTION.NE:\n            return [1, -1];\n        case MOVE.DIRECTION.NW:\n            return [-1, -1];\n        case MOVE.DIRECTION.S:\n            return [0, 1];\n        case MOVE.DIRECTION.SE:\n            return [1, 1];\n        case MOVE.DIRECTION.SW:\n            return [-1, 1];\n        case MOVE.DIRECTION.E:\n            return [1, 0];\n        case MOVE.DIRECTION.W:\n            return [-1, 0];\n        default:\n            return [0, 0]; // ??????\n    }\n};\n\n/**\n * Convert a board move to a *concise* string representation that can be shown to the user.\n *\n * @param move The move data.\n * @return {string} The string representation.\n */\nexport const moveToString = move => JSON.stringify(move); // TODO: implement this\n\nexport const adjustXY = (width, height) => {\n    return ([x, y]) => [];\n};","import {arrayBufferToString} from \"../util\";\nimport { actionChannel, call, take, put, race } from \"redux-saga/effects\";\n\nexport const SEQUENTIAL_MOVE_ACTION = \"SMOVE\";\nexport const MOVE_ACTION = \"MOVE\";\nexport const LOAD_FILE_ACTION = \"LOAD_FILE\";\n\nexport function * animateSaga() {\n\n}\n\nexport function runSequentialMove(next = true) {\n    return {\n        type: SEQUENTIAL_MOVE_ACTION,\n        payload: {next}\n    };\n}\n\nexport function loadFile(file) {\n    const fileReadHandle = new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            const text = reader.result instanceof ArrayBuffer ? arrayBufferToString(reader.result) : reader.result;\n            resolve(JSON.parse(text));\n        };\n        reader.onerror = () => reject();\n        reader.readAsBinaryString(file);\n    });\n\n    return {\n        type: LOAD_FILE_ACTION,\n        payload: fileReadHandle\n    }\n}","import {fulfilled, processMove, TILE} from \"../util\";\nimport {LOAD_FILE_ACTION, MOVE_ACTION, SEQUENTIAL_MOVE_ACTION} from \"../actions\";\n\n// TODO: document board object schema\n\nconst initialState = {\n    // map: [],\n    // maxGold: 0,\n    // maxBots: 0,\n    // width: 0,\n    // height: 0,\n    // teams: [],\n    // teamNames: [],\n    // bases: {},\n    // robots: {}\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case fulfilled(LOAD_FILE_ACTION): {\n            // load new map\n            const {map, width, height, teams, max_gold: maxGold, max_bots: maxBots, moves} = action.payload,\n                squaredMap = squarify(map, height, width),\n                bases = getBases(squaredMap),\n                teamsWithScores = {};\n            teams.forEach(team => teamsWithScores[team] = 0);\n            return {\n                map: squaredMap,\n                maxGold,\n                maxBots,\n                width,\n                height,\n                teams: teamsWithScores,\n                teamNames: teams,\n                bases,\n                robots: [], // no robots at the start\n                moves,\n                nextMove: 0\n            };\n        }\n        case MOVE_ACTION:\n            // make a move!\n            const {forward, move} = action.payload;\n            return processMove(state, move, forward);\n        case SEQUENTIAL_MOVE_ACTION:\n            const {next: nextOrPrevious} = action.payload,\n                {moves, nextMove} = state;\n            const moveToExecute = nextOrPrevious ? moves[nextMove] : moves[nextMove - 1],\n                newState = {\n                    ...state,\n                    moves: state.moves,\n                    nextMove: nextOrPrevious ? nextMove + 1 : nextMove -1 // mfw\n                };\n            return processMove(newState, moveToExecute, nextOrPrevious);\n        default:\n            return state\n    }\n}\n\nconst adjustXY = (width, height, [x, y]) => [height - x - 1, width - y - 1];\n\n/**\n * Get all the team home base locations from a map.\n *\n * @param map The map.\n * @return An object mapping team names to home base locations.\n */\nconst getBases = map => {\n    const bases = {},\n        width = map.length,\n        height = map[0].length;\n    for (let i = 0; i < map.length; i++) {\n        const row = map[i];\n        for (let j = 0; j < row.length; j++) {\n            const elem = row[j];\n            if (elem.type === TILE.BASE) {\n                bases[elem.team] = [j,i];\n            }\n        }\n    }\n    return bases;\n};\n\n/**\n * Convert a 1-dimensional representation with a given width into a 2-dimensional representation. Note that the mapping\n * goes row-by-row, not column-by-column, i.e. if the width is {@code n}, then the first {@code n} cells represent the\n * first row of the 2D representation.\n *\n * @param map The array.\n * @param height The height of the 2D representation.\n * @param width The width of the 2D representation.\n * @return {Array} The 2D representation.\n */\nconst squarify = (map, height, width) => {\n    const squareMap = [];\n    let row = 0, column = 0;\n    for (let i = 0; i < map.length; i++) {\n        if (squareMap[row] === void 0) {\n            squareMap[row] = [];\n        }\n        squareMap[row][column] = map[i];\n\n        // if (column < width - 1) {\n        //     column++;\n        // } else {\n        //     column = 0;\n        //     row++;\n        // }\n        if (row < height - 1) {\n            row++;\n        } else {\n            column++;\n            row = 0;\n        }\n    }\n    return squareMap;\n};","import {combineReducers} from 'redux';\nimport boardReducer from \"./boardReducer\";\nimport initializedReducer from \"./initializedReducer\";\n\nconst rootReducer = combineReducers({\n    board: boardReducer,\n    initialized: initializedReducer\n});\n\nexport default rootReducer;","import {fulfilled} from \"../util\";\nimport {LOAD_FILE_ACTION} from \"../actions\";\n\nexport default (state = false, action) => {\n    switch (action.type) {\n        case fulfilled(LOAD_FILE_ACTION):\n            return true;\n        default:\n            return state;\n    }\n};","import React, {Component} from 'react';\n\nexport default class FieldFileInput extends Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        const { onChange } = this.props,\n            file = e.target.files[0];\n        // console.log(file);\n        onChange(file);\n    }\n\n    render() {\n        const { label, types } = this.props;\n        return (\n            <div>\n                <div id=\"section-head\">{label}</div>\n                <div>\n                    <input\n                        type='file'\n                        accept={types}\n                        onChange={this.onChange}\n                    />\n                </div>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport FieldFileInput from \"../../FieldFileInput\";\nimport {loadFile} from \"../../actions\";\nimport {bindActionCreators} from \"redux\";\n\nimport \"./style.css\";\n\nclass Header extends Component {\n    render() {\n        /*  teams: a list of all the teams\n            scores: a list of the current scores for each team in order of the teams list\n            bots: a list of num of bots for the teams in order of teams list\n            goldcap: an int that represents the gold cap per bot\n            moves: all moves\n            next: next index of move\n        */\n        const {teamNames, teams, maxGold, moves, nextMove} = this.props;\n        const input = <FieldFileInput className=\"header-item\"\n                                      label={\"Import\"}\n                                      types={\".json\"}\n                                      onChange={this.props.loadFile}/>;\n        if (teamNames === void 0) {\n            return (\n                <div id=\"header-container\">\n                    {input}\n                </div>\n            );\n        }\n        return (\n            <div id=\"header-container\">\n                {input}\n                <div className=\"header-item\" id=\"Score\">\n                    <div className=\"section-head\" key={-1}>Scores</div>\n\n                    {Object.keys(teams).map((team, i) =>\n                        <div className=\"score-item\" key={i}>\n                            Team {team}: {teams[team]}\n                        </div>\n                    )}\n                </div>\n\n                {/* <div className=\"header-item\" id=\"NumBots\">{numBots}</div> */}\n                <div className=\"header-item\" id=\"MovesLeft\">\n                    <div className=\"section-head\" key={\"gold\"}>Gold Cap: {maxGold}</div>\n                    <div className=\"section-head\" key={\"move-head\"}>Moves: {nextMove} / {moves.length}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({board: {teamNames, maxGold, maxBots, teams, robots, moves, nextMove}}) => {\n    return {\n        teamNames, teams, robots, maxGold, maxBots, moves, nextMove\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return bindActionCreators({\n        loadFile\n    }, dispatch);\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React, {Component} from \"react\";\nimport TableDragSelect from \"react-table-drag-select\";\nimport \"react-table-drag-select/style.css\";\nimport {TILE} from \"../../util\";\nimport classNames from 'classnames';\nimport \"./style.css\";\nimport { saveAs } from 'file-saver';\n\nclass EditorGrid extends Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            width: 30,\n            height: 5,\n            cells: this.initCells(30, 5), \n            selectedItem: \"gold\",\n            grid: this.initGrids(30, 5),\n            lastgrid: this.initGrids(30,5),\n            editTile: null,\n            max_gold: 10,\n            max_bots: 4,\n            vision: 2,\n            show: false,\n            end_goal: 100,\n        }\n    }\n\n    showEditor = () => {\n        this.setState({\n            show: !this.state.show\n        })\n    }\n\n    inBounds(pos) {\n        if (pos[0] >= 0 && pos[0] < this.state.width && \n            pos[1] >= 0 && pos[1] < this.state.height) {\n            return true;\n        }\n        return false;\n    }\n\n    changeParams = (field, newValue) => {\n        if (newValue > 0) {\n            if (field === 'width') {\n                let newCells = this.initCells(newValue, this.state.height);\n                this.setState({\n                    width: newValue,\n                    cells: newCells,\n                    grid: this.initGrids(newValue, this.state.height),\n                    lastgrid: this.initGrids(newValue, this.state.height)\n                });\n                this.forceUpdate()\n            } else if (field === 'height') {\n                let newCells = this.initCells(this.state.width, newValue);\n                this.setState({\n                    height: newValue,\n                    cells: newCells,\n                    grid: this.initGrids(this.state.width, newValue),\n                    lastgrid: this.initGrids(this.state.width, newValue)\n                })\n                this.forceUpdate();\n            } else if (field === 'vision') {\n                this.setState({\n                    vision: newValue\n                })\n            } else if (field === 'max_gold') {\n                this.setState({\n                    max_gold: newValue\n                })\n            } else if (field === 'max_bots') {\n                this.setState({\n                    max_bots: newValue\n                })\n            } else if (field === 'end_goal') {\n                this.setState({\n                    end_goal: newValue\n                })\n            }\n        }\n    }\n\n    initCells(w, h) {\n        let cells = [];\n        for (let y = 0; y < h; y++) {\n            let row = []\n            for (let x = 0; x < w; x++) {\n                row.push(false);\n            }\n            cells.push(row);\n        }\n        return cells;\n    }\n\n    initGrids(w, h) {\n        let cells = [];\n        for (let y = 0; y < h; y++) {\n            let row = []\n            for (let x = 0; x < w; x++) {\n                row.push({\n                    type: TILE.PATH,\n                    cost: 10\n                });\n            }\n            cells.push(row);\n        }\n        return cells;\n    }\n\n    generateTable(cells) {\n        let width = cells[0].length;\n        let height = cells.length;\n        let table = []\n        for (let y = 0; y < height; y++) {\n            let row = []\n            for (let x = 0; x < width; x++) {\n                let currx = x;\n                let curry = y;\n                let cell = this.state.grid[curry][currx];\n                if (cell.type === TILE.PATH) {\n                    row.push(\n                        <td className={classNames('grid', 'path')}\n                         key={currx + \"|\" + curry}>\n                        {/* {this.state.grid[curry][currx].cost} */}\n                        </td>\n                    );\n                } else if (cell.type === TILE.WALL) {\n                    row.push(\n                        <td className={classNames('grid', 'wall')}\n                         key={currx + \"|\" + curry}>\n                        </td>\n                    );\n                } else if (cell.type === TILE.GOLD) {\n                    row.push(\n                        <td className={classNames('grid', 'gold')}\n                         key={currx + \"|\" + curry}>\n                         {this.state.grid[curry][currx].amount}\n                        </td>\n                    );\n                } else if (cell.type === TILE.WORM) {\n                    row.push(\n                        <td className={classNames('grid', 'worm')}\n                         key={currx + \"|\" + curry}>\n                        </td>\n                    );\n                } else if (cell.type === TILE.BASE) {\n                    row.push(\n                        <td className={\n                            classNames('grid', \n                            cell.team === \"Blue\" ? 'base-blue' : 'base-red')}\n                         key={currx + \"|\" + curry}>\n                        </td>\n                    );\n                } \n                \n            }\n            table.push(<tr key={y}>{row}</tr>);\n        }\n        return table;\n    }\n\n    updateEditResult = (pos, field, newValue) => {\n        let newGrid = this.state.grid;\n        let x = pos[0];\n        let y = pos[1];\n        if (field === 'cost') {\n            newGrid[y][x] = {\n                type: TILE.PATH,\n                cost: newValue\n            }\n        } else if (field === 'amount' && newValue < 10 && newValue > 0) {\n            newGrid[y][x] = {\n                type: TILE.GOLD,\n                amount: newValue\n            }\n        } else if (field === 'x') {\n            let outy = newGrid[y][x].out[1];\n            newGrid[y][x] = {\n                type: TILE.WORM,\n                out: [newValue, outy]\n            }\n        } else if (field === 'y') {\n            let outx = newGrid[y][x].out[0];\n            newGrid[y][x] = {\n                type: TILE.WORM,\n                out: [outx, newValue]\n            }\n        }\n\n        this.setState({\n            grid: newGrid\n        });\n\n        \n    }\n\n    generateEditItem = () => {\n        const pos = this.state.editTile;\n        let form = \"\";\n        if (pos !== null && pos !== undefined && this.inBounds(pos)) {\n            const tile = this.state.grid[pos[1]][pos[0]];\n            // if (tile.type === TILE.PATH) {\n            //     form = \n            //         <div className=\"edit-item\">\n            //         <div className=\"edit-item-label\">Cost: </div>\n            //         <input \n            //         key={0}\n            //         type=\"number\" \n            //         value={this.state.grid[pos[1]][pos[0]].cost}\n            //         onChange={(e)=>this.updateEditResult(\n            //             pos, 'cost',\n            //             Number(e.target.value))}\n            //         />\n            //         </div>\n            // } else \n            if (tile.type === TILE.GOLD) {\n                form = \n                    <div className=\"edit-item\">\n                    <div className=\"edit-item-label\">Amount: </div>\n                    <input \n                    key={1}\n                    type=\"number\" \n                    value={this.state.grid[pos[1]][pos[0]].amount}\n                    onChange={(e)=>this.updateEditResult(\n                        pos, 'amount',\n                        Number(e.target.value))}\n                    />\n                    </div>\n            } else if (tile.type === TILE.WORM) {\n                form = \n                    <div className=\"edit-item\">\n                    <div className=\"edit-item-label\">To Position X: </div>\n                    <input \n                    type=\"number\" \n                    key={2}\n                    value={this.state.grid[pos[1]][pos[0]].out[0]}\n                    onChange={(e)=>this.updateEditResult(\n                        pos, 'x',\n                        Number(e.target.value))} />\n                    <div className=\"edit-item-label\">Y: </div>\n                    <input \n                    type=\"number\" \n                    key={3}\n                    value={this.state.grid[pos[1]][pos[0]].out[1]}\n                    onChange={(e)=>this.updateEditResult(\n                        pos, 'y',\n                        Number(e.target.value))} />\n                    <p>Note: Bottom left grid is (0,0)</p>\n                    <p>Out position must be a Path.</p>\n                    </div>\n            }\n        }\n        return form;\n        \n    }\n\n    reset = () => {\n        let init_cells = this.initCells(this.state.width, this.state.height);\n        let newLastGrid = this.state.grid.map(arr => arr.slice(0));\n        this.setState({\n            cells: init_cells, \n            lastgrid: newLastGrid\n        })\n    }\n\n    changeSelectedItem = (type) => {\n        this.reset();\n        this.setState({\n            selectedItem: type,\n            editTile: null\n        })\n    }\n\n    generateToolBox = () => {\n        let lst = [];\n        let items = [\"path\", \"wall\", \"base-red\", \"base-blue\", \"worm\", \"gold\", \"edit\", \"done\"];\n        for (let i = 0; i < items.length; i++) {\n            let type = items[i];\n            lst.push(\n                <div \n                key={i}\n                className={classNames(\n                    type,\n                    \"tool-item\",\n                    this.state.selectedItem === items[i] ? \"selected\" : \"not-selected\"\n                )}\n                onClick={(e) => this.changeSelectedItem(type)}></div>\n            );\n        }\n        return lst;\n    }\n\n    getDifference = (cells1, cells2) => {\n        let newCells = this.initCells(this.state.width, this.state.height);\n        for (let y = 0; y < this.state.height; y++) {\n            for (let x = 0; x < this.state.width; x++) {\n                if (cells1[y][x] !== cells2[y][x]) {\n                    newCells[y][x] = true;\n                    break;\n                }\n            }\n        }\n        return newCells;\n    }\n\n\n    updateGrid = (cells) => {\n        let newGrids = this.state.grid;\n        if (this.state.selectedItem === 'edit') {\n            cells = this.getDifference(cells, this.state.cells);\n        }\n\n        for (let y = 0; y < cells.length; y++) {\n            for (let x = 0; x < cells[y].length; x++) {\n                if (cells[y][x] === true) {\n                    if (this.state.selectedItem === \"path\") {\n                        newGrids[y][x] = {\n                            type: TILE.PATH,\n                            cost: 10,\n                        }\n                    } else if (this.state.selectedItem === \"wall\") {\n                        newGrids[y][x] = {\n                            type: TILE.WALL\n                        }\n                    } else if (this.state.selectedItem === \"base-red\") {\n                        newGrids[y][x] = {\n                            type: TILE.BASE,\n                            team: \"Red\"\n                        }\n                    } else if (this.state.selectedItem === \"base-blue\") {\n                        newGrids[y][x] = {\n                            type: TILE.BASE,\n                            team: \"Blue\"\n                        }\n                    } else if (this.state.selectedItem === \"worm\") {\n                        newGrids[y][x] = {\n                            type: TILE.WORM,\n                            out: [0,0]\n                        }\n                    } else if (this.state.selectedItem === \"gold\") {\n                        newGrids[y][x] = {\n                            type: TILE.GOLD,\n                            amount: 9\n                        }\n                    } else if (this.state.selectedItem === \"edit\") {\n                        //edit\n                        this.setState({\n                            editTile: [x,y]\n                        })\n                    } else if (this.state.selectedItem === \"done\") {\n                        this.setState({\n                            editTile: null,\n                            selectedItem: null\n                        });\n                    }\n                } else {\n                    newGrids[y][x] = this.state.lastgrid[y][x];\n                }\n            }\n        }\n        this.setState({\n            cells: cells,\n            grid: newGrids,\n        });\n\n    }\n\n    tileToJson(tile) {\n        if (tile.type === TILE.WORM) {\n            return {\n                type: tile.Type,\n                out: [tile.out[0], this.state.height - tile.out[1] - 1]\n            }\n        } else if (tile.type === TILE.PATH) {\n            return {\n                type: tile.type,\n                cost: tile.cost\n            };\n        } else if (tile.type === TILE.GOLD) {\n            return {\n                type: tile.type,\n                amount: tile.amount\n            }\n        } else if (tile.type === TILE.WALL) {\n            return {\n                type: tile.type\n            }\n        } else if (tile.type === TILE.BASE) {\n            return {\n                type: tile.type,\n                team: tile.team\n            }\n        }\n    }\n\n\n    export = () => {\n        let map = [];\n        let redBaseFlag = 0;\n        let blueBaseFlag = 0;\n        for (let x = 0; x < this.state.width; x++) {\n            for (let y = 0; y <this.state.height; y++) {\n                let tile = this.state.grid[y][x]\n                map.push(this.tileToJson(tile));\n                if (tile.type === TILE.BASE) {\n                    if (tile.team === 'Red') {\n                        redBaseFlag += 1;\n                    } else if (tile.team === 'Blue') {\n                        blueBaseFlag += 1;\n                    }\n                }\n                \n            }\n        }\n\n        if (redBaseFlag !== 1 || blueBaseFlag !== 1) {\n            //missing bases\n            console.log(redBaseFlag, blueBaseFlag);\n            alert('Each team must have exactly one homebase.');\n            return;\n        }\n\n        let obj = {\n            width: this.state.width,\n            height: this.state.height,\n            max_gold: this.state.max_gold,\n            max_bots: this.state.max_bots,\n            end_goal: this.state.end_goal,\n            teams: [\"Blue\", \"Red\"],\n            vision: 2,\n            map: map,\n            moves: []\n        }\n\n        \n        var fileName = 'map.json';\n        \n        // Create a blob of the data\n        var fileToSave = new Blob([JSON.stringify(obj)], {\n            type: 'application/json',\n            name: fileName\n        });\n        \n        // Save the file\n        saveAs(fileToSave, fileName);\n\n        // let text = JSON.stringify(obj);\n        // let filename = \"map.json\";\n        // let element = document.createElement('a');\n        // element.setAttribute('href', 'data:application/octet-stream;charset=utf-8,' + encodeURIComponent(text));\n        // element.setAttribute('download', filename);\n\n        // element.style.display = 'none';\n        // document.body.appendChild(element);\n\n        // element.click();\n\n        // document.body.removeChild(element);\n    }\n\n\n    render() {\n        return (\n            <div id=\"editorContainer\">\n                <div \n                id=\"editContainerContent\" \n                className={this.state.show ? 'editorContent' : 'disabled'}>\n                    <div id=\"editorHeader\">\n                        <div className='input-item'>\n                            <div className=\"label\">Width: </div>\n                            <input \n                            type=\"number\" name=\"width\" \n                            value={this.state.width} \n                            onChange={(e) => this.changeParams('width',Number(e.target.value))}></input>\n                        </div>\n                        <div className='input-item'>\n                            <div className=\"label\">Height: </div>\n                            <input \n                            type=\"number\" name=\"height\" \n                            value={this.state.height}\n                            onChange={(e) => this.changeParams('height',Number(e.target.value))}></input>\n                        </div>\n                        <div className='input-item'>\n                            <div className=\"label\">Vision: </div>\n                            <input \n                            type=\"number\" name=\"vision\" \n                            value={this.state.vision}\n                            onChange={(e) => this.changeParams('vision',Number(e.target.value))}></input>\n                        </div>\n                        <div className='input-item'>\n                            <div className=\"label\">Gold Cap: </div>\n                            <input \n                            type=\"number\" name=\"max_gold\" \n                            value={this.state.max_gold}\n                            onChange={(e) => this.changeParams('max_gold',Number(e.target.value))}></input>\n                        </div>\n                        <div className='input-item'>\n                            <div className=\"label\">Bot Cap: </div>\n                            <input \n                            type=\"number\" name=\"max_bots\" \n                            value={this.state.max_bots}\n                            onChange={(e) => this.changeParams('max_bots',Number(e.target.value))}></input>\n                        </div>\n                        <div className='input-item'>\n                            <div className=\"label\">End Goal: </div>\n                            <input \n                            type=\"number\" name=\"end_goal\" \n                            value={this.state.end_goal}\n                            onChange={(e) => this.changeParams('end_goal',Number(e.target.value))}></input>\n                        </div>\n                    </div>\n                    <TableDragSelect\n                    value={this.state.cells}\n                    onChange={cells => this.updateGrid(cells)}\n                    >\n                    {this.generateTable(this.state.cells)}\n                    </TableDragSelect>\n                    <br/>\n                    <div id=\"toolBox\">\n                        <div className=\"label\">Tools: </div>\n                        {this.generateToolBox()}\n                    </div>\n                    <br />\n                    <div id=\"editorBox\" className={this.state.editTile === null ? 'disabled' : 'not-disabled'}>\n                        <div className=\"label\">Edit: </div>\n                        {this.generateEditItem()}\n                    </div>\n                    <br />\n                    <div id=\"export\">\n                    <button onClick={(e) => this.export()}>Export</button>\n                    </div>\n                </div>\n                <br/>\n                <button onClick={(e) => this.showEditor()}>\n                {this.state.show ? 'Hide Editor' : 'Show Editor'}\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default EditorGrid;","import React from 'react';\nimport \"../style.css\";\nimport {TILE} from \"../../../../util\";\n\nimport redBot from '../red_robot_128.svg';\nimport blueBot from '../blue_robot_128.svg';\n\nexport default ({tile, robots}) => {\n    const style = {};\n    \n    let type = tile.type;\n    if (type === TILE.BASE) {\n        style[\"border\"] = `1px solid ${tile.team.toLowerCase()}`; // TODO make this nicer!\n    }\n\n    let contents = \"\";\n    if (type === TILE.GOLD) {\n        if (tile.amount === 0) {\n            //no gold left, switch to path\n            tile = {\n                type: TILE.PATH,\n                cost: 10\n            };\n            type = TILE.PATH;\n        } else {\n            contents = tile.amount;\n        }\n        \n    }\n    \n    if (type === TILE.PATH) {\n        contents = tile.cost;\n    }\n\n    const bots = robots.map(({team, handle}) => {\n        if (team === \"Red\") {\n            return <img key={'red'+handle} className=\"bot-img\" src={redBot} alt=\"RBot\" />;\n        } else if (team === \"Blue\") {\n            return <img key={'blue'+handle} className=\"bot-img\" src={blueBot} alt=\"BBot\" />;\n        } else {\n            return null; // >:(\n        }\n    });\n\n    let typeClass = \"path\";\n    if (type === TILE.GOLD) {\n        typeClass = \"gold\";\n    } else if (type === TILE.BASE) {\n        typeClass = \"base\";\n    } else if (type === TILE.WORM) {\n        typeClass = \"worm\";\n    } else if (type === TILE.WALL) {\n        typeClass = \"wall\"\n    }\n\n\n    return (\n        <div style={style} className={`map-tile ${typeClass}`}>\n            {contents}\n            {bots}\n        </div>\n    )\n}","import React from 'react';\n\nimport MapTile from \"./MapTile\";\nimport \"./style.css\";\n\nexport default ({tiles, robots, y}) => {\n    const robotsByTile = Array(tiles.length);\n    for (let i = 0; i < tiles.length; i++) robotsByTile[i] = [];\n    robots.forEach(robot => {\n        const {xy: [x, ]} = robot;\n        robotsByTile[x].push(robot);\n    });\n    return (\n        <div className=\"map-row\">\n            {tiles.map((tile, index) =>\n                <MapTile key={index} tile={tile} robots={robotsByTile[index]} x={index} y={y}/>\n            )}\n        </div>\n    )\n}","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport MapRow from \"./MapRow\";\n\nclass MapContainer extends Component {\n    render() {\n        const { map, width, height, teams, bases, robots } = this.props;\n        if (map == null) { // double equals is intentional here, please don't change this\n            return (\n                <div id=\"map-container\">\n\n                </div>\n            )\n        }\n\n        const robotsByRow = Array(height);\n        for (let i = 0; i < height; i++) robotsByRow[i] = []; // have to do this manually as [] is an object\n        robots.forEach(robot => {\n            const {xy: [, y]} = robot;\n            robotsByRow[y].push(robot);\n        });\n\n        const rows = map.map((mapRow, index) => {\n            return <MapRow tiles={mapRow} key={index} robots={robotsByRow[index]} y={index}/>\n        });\n\n        return (\n            <div id=\"map-container\">\n                {rows}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({board: {map, width, height, teams, bases, robots}}) => {\n    return {\n        map, width, height, teams, bases, robots\n    };\n};\n\nexport default connect(mapStateToProps)(MapContainer);","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport {connect} from 'react-redux';\n\nimport {moveToString} from \"../../util\";\nimport \"./style.css\";\n\n\nclass MovesListContainer extends Component {\n    render() {\n        const {moves, nextMove} = this.props;\n        if (moves == null) { // double equals is intentional here, please don't change this\n            return (\n                <div id=\"moves-container\">\n\n                </div>\n            )\n        }\n\n        const movesList = moves.map((move, index) => {\n            const classes = classNames({\n                \"move-element\": true,\n                \"past-move\": index < nextMove,\n                \"next-move\": index === nextMove\n            });\n\n            if (index < nextMove) {\n                // don't render past moves :(\n                return null;\n            } else {\n                return <p key={index} className={classes}>{moveToString(move)}</p>\n            }\n        }).filter(elem => elem !== null);\n\n        return (\n            <div id=\"moves-container\">\n                {movesList}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({board: {moves, nextMove}}) => {\n    return {\n        moves, nextMove\n    };\n};\n\nexport default connect(mapStateToProps)(MovesListContainer);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport './App.css';\nimport Header from './Header';\nimport EditorGrid from './EditorGrid';\nimport MapContainer from \"./MapContainer\";\nimport MovesListContainer from \"./MovesListContainer\";\nimport {bindActionCreators} from \"redux\";\nimport {runSequentialMove} from \"../actions\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n\n        };\n    }\n\n    render() {\n        let {height, nextMove, totalMoves, initialized} = this.props;\n        if (height === void 0) {\n            height = 0;\n        }\n\n        return (\n            <div className=\"App\">\n                <Header/>\n                {/* style={{height: 52 * height}} */}\n                <div id=\"data\" style={{height: 32 * height}}>\n                    <div style={{flex: 2}}>\n                        <MapContainer/>\n                    </div>\n                    <div style={{flex: \"1\", overflowY: \"scroll\", overflowX: \"scroll\"}}>\n                        <MovesListContainer/>\n                    </div>\n                    <br/>\n                </div>\n                {initialized &&\n                    <div id=\"buttons\">\n                        <button onClick={() => this.props.runSequentialMove(false)}\n                                disabled={nextMove === 0}>Previous Move</button>\n\n                        <button onClick={() => this.props.runSequentialMove(true)}\n                                disabled={nextMove >= totalMoves}>Next Move</button>\n                    </div>\n                }\n\n                <br/>\n                <EditorGrid/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({board: {height, nextMove, moves}, initialized}) => {\n    const totalMoves = typeof moves === \"undefined\" ? 0 : moves.length;\n    return {height, nextMove, totalMoves, initialized};\n};\n\n// for testing\n// TODO: remove this when done\nconst mapDispatchToProps = dispatch => {\n    return bindActionCreators({\n        runSequentialMove\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport ReduxPromise from \"redux-promise-middleware\";\nimport createSagaMiddleware from \"redux-saga\";\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nimport reducers from './reducers';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst Saga = createSagaMiddleware();\nconst store = createStore(reducers, composeWithDevTools(\n    applyMiddleware(ReduxPromise, Saga),\n    // other store enhancers if any\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}