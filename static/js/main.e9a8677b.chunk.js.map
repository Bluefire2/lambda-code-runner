{"version":3,"sources":["App/MapContainer/MapRow/red_robot_128.svg","App/MapContainer/MapRow/blue_robot_128.svg","util.js","actions/index.js","reducers/boardReducer.js","reducers/gameStatusReducer.js","reducers/index.js","FieldFileInput/FieldFileInput.js","App/Header/Header.js","App/EditorGrid/EditorGrid.js","App/MapContainer/MapRow/MapTile/MapTile.js","App/MapContainer/MapRow/MapRow.js","App/MapContainer/MapContainer.js","App/MovesListContainer/MovesListContainer.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MOVE","TAKE","SPAWN","N","NE","NW","S","SE","SW","E","W","TILE","BASE","WALL","PATH","GOLD","WORM","fulfilled","name","isBetween","lower","upper","x","arrayBufferToString","buf","String","fromCharCode","apply","Uint16Array","processMove","board","move","forward","produce","newBoard","type","command","team","handle","direction","robot","robots","find","bot","_directionToCoordinat","directionToCoordinates","_directionToCoordinat2","Object","slicedToArray","dx","dy","_robot$xy","xy","y","fromTile","map","_ref","width","height","toTile","wormHistory","push","out","teams","gold","lastDeposit","lastIsWorm","pop","console","log","lastDepo","undefined","amount","_robot$xy2","_directionToCoordinat3","_directionToCoordinat4","tile","concat","toConsumableArray","bases","filter","animateSaga","Action","SEQUENTIAL_MOVE_ACTION","SEQUENTIAL_MOVE_CYCLE","SEQUENTIAL_MOVE_CYCLE_STOP","MOVE_ACTION","LOAD_FILE_ACTION","wait","ms","Promise","resolve","setTimeout","channel","outOfMoves","delay","regenerator_default","a","wrap","_context","prev","next","actionChannel","sent","take","select","state","nextMove","moves","length","gameStatus","playDelay","race","call","stopped","put","runSequentialMove","stopGame","abrupt","stop","_marked","arguments","payload","playGame","loadFile","file","fileReadHandle","reject","reader","FileReader","onloadend","text","result","ArrayBuffer","JSON","parse","onerror","readAsBinaryString","initialState","getBases","i","row","j","elem","squarify","squareMap","column","initialized","play","rootReducer","combineReducers","action","_action$payload","maxGold","max_gold","maxBots","max_bots","squaredMap","teamsWithScores","forEach","teamNames","_action$payload2","nextOrPrevious","moveToExecute","newState","objectSpread","draft","FieldFileInput","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","onChange","bind","assertThisInitialized","e","target","files","_this$props","label","types","react_default","createElement","id","accept","Component","Header","input","FieldFileInput_FieldFileInput","className","key","keys","connect","_ref$board","dispatch","bindActionCreators","EditorGrid","showEditor","setState","show","changeParams","field","newValue","newCells","initCells","cells","grid","initGrids","lastgrid","forceUpdate","vision","end_goal","max_moves","updateEditResult","pos","newGrid","cost","outy","outx","generateEditItem","editTile","form","inBounds","value","Number","reset","init_cells","newLastGrid","arr","slice","changeSelectedItem","selectedItem","generateToolBox","lst","items","_loop","classNames","onClick","getDifference","cells1","cells2","updateGrid","newGrids","export","redBaseFlag","blueBaseFlag","tileToJson","alert","obj","fileToSave","Blob","stringify","saveAs","w","h","table","currx","curry","cell","Type","_this2","lib_default","generateTable","MapTile","style","toLowerCase","contents","bots","_ref2","src","redBot","alt","blueBot","typeClass","MapRow","tiles","robotsByTile","Array","index","MapContainer","robotsByRow","rows","mapRow","MovesListContainer","movesList","classes","move-element","past-move","next-move","moveToString","App","totalMoves","App_Header_Header","flex","App_MapContainer_MapContainer","overflowY","overflowX","App_MovesListContainer_MovesListContainer","disabled","App_EditorGrid_EditorGrid","_ref$gameStatus","Boolean","window","location","hostname","match","Saga","createSagaMiddleware","store","createStore","reducers","composeWithDevTools","applyMiddleware","ReduxPromise","run","ReactDOM","render","es","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9a8677b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/red_robot_128.168b46bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue_robot_128.74e0a7af.svg\";","import produce from 'immer';\n\nexport const DIRECTION = {\n    FORWARD: \"FORWARD\",\n    BACKWARD: \"BACKWARD\"\n};\n\nexport const MOVE = {\n    TYPE: {\n        TAKE: \"Take\",\n        MOVE: \"Move\",\n        SPAWN: \"Spawn\"\n    },\n    DIRECTION: {\n        N: \"N\",\n        NE: \"NE\",\n        NW: \"NW\",\n        S: \"S\",\n        SE: \"SE\",\n        SW: \"SW\",\n        E: \"E\",\n        W: \"W\"\n    }\n};\n\nexport const TILE = {\n    BASE: \"B\",\n    WALL: \"W\",\n    PATH: \"P\",\n    GOLD: \"G\",\n    WORM: \"Worm\"\n};\n\nexport const pending = name => name + \"_PENDING\";\nexport const fulfilled = name => name + \"_FULFILLED\";\nexport const rejected = name => name + \"_REJECTED\";\n\n\nconst isBetween = (lower, upper, x) => lower <= x && x <= upper;\n\n// AAAAAAAAAAAAAAAAAAAAAAAAAAAA\nexport const arrayBufferToString = buf =>\n    String.fromCharCode.apply(null, new Uint16Array(buf));\n\n/**\n * Execute a runMove in a given direction (forwards or backwards), generating the new board state.\n *\n * @param board The board state.\n * @param move The runMove to execute.\n * @param forward Whether the runMove should be done forwards or backwards (undo).\n *\n * @return {*} The new board state, after executing the runMove.\n */\nexport const processMove = (board, move, forward) => {\n    return produce(board, newBoard => {\n        const {command: type, team, handle} = move;\n        switch (type) {\n            case MOVE.TYPE.MOVE: {\n                // move robot\n\n                const {direction} = move,\n                    robot = newBoard.robots.find(bot => bot.handle === handle);\n\n                let [dx, dy] = directionToCoordinates(direction),\n                    [x, y] = robot.xy,\n                    fromTile = newBoard.map[y][x];\n\n                // if the move is backwards, we invert the co-ordinate changes\n                if (!forward) {\n                    [dx, dy] = [-dx, -dy];\n                }\n\n                // update co-ordinates, checking bounds\n                if (isBetween(0, newBoard.width - 1, x + dx)\n                    && isBetween(0, newBoard.height, y + dy)) {\n                    robot.xy = [x + dx, y + dy];\n                }\n\n                let toTile = newBoard.map[robot.xy[1]][robot.xy[0]];\n\n                if (forward) {\n                    //forward stepping\n                    if (toTile.type === TILE.WORM) {\n                        //moving towards wormhole\n                        //ASSUMPTION: wormhole only leads to paths\n                        robot.wormHistory.push(robot.xy); //add wormhole pos to history\n                        robot.xy = toTile.out;\n                    } else if (toTile.type === TILE.BASE && toTile.team === team) {\n                        //moving towards homebase\n                        let team = toTile.team;\n                        //add robot's gold to the base team\n                        newBoard.teams[team] += robot.gold;\n                        robot.lastDeposit.push(robot.gold);\n                        robot.gold = 0;\n                        robot.wormHistory.push([-1, -1]); //not from wormhole\n                    } else {\n                        robot.wormHistory.push([-1, -1]); //not from wormhole\n                    }\n                } else {\n                    //back stepping\n                    let lastIsWorm = robot.wormHistory.pop();\n                    if (lastIsWorm[0] !== -1 && lastIsWorm[1] !== -1) {\n                        //back stepping for wormhole\n                        robot.xy = [lastIsWorm[0] + dx][lastIsWorm[-1] + dy];\n                    } else if (fromTile.type === TILE.BASE && fromTile.team === team) {\n                        //stepping back from base\n                        console.log('stepping back from base.');\n                        let lastDepo = robot.lastDeposit.pop();\n                        console.log(lastDepo);\n                        if (lastDepo !== undefined) {\n                            newBoard.teams[fromTile.team] -= lastDepo;\n                            robot.gold += lastDepo;\n                        } else {\n                            //should not happen\n                            console.log(\"stepping back with undefined last deposit\");\n                        }\n                    }\n                }\n\n                break;\n            }\n            case MOVE.TYPE.TAKE: {\n                // take/return gold\n                const {direction, amount} = move,\n                robot = newBoard.robots.find(bot => bot.handle === handle),\n                    [x, y] = robot.xy,\n                    [dx, dy] = directionToCoordinates(direction),\n                    tile = newBoard.map[y + dy][x + dx];\n\n                if (tile.type === TILE.GOLD) {\n                    if (forward) {\n                        // take some gold from the pile, if there's any left\n                        if (amount > 0) {\n                            // move gold from pile into the team's score counter\n                            tile.amount -= amount;\n                            robot.gold += amount;\n                        }\n                    } else {\n                        // return gold to pile\n                        tile.amount += amount;\n                        robot.gold -= amount;\n                    }\n                }\n                break;\n            }\n            case MOVE.TYPE.SPAWN: {\n                if (forward) {\n                    // spawn new robot\n                    newBoard.robots = [...newBoard.robots, {\n                        handle,\n                        team,\n                        xy: newBoard.bases[team], // spawn at the home base location\n                        gold: 0,\n                        lastDeposit: [],\n                        wormHistory: []\n                    }]\n                } else {\n                    // delete existing robot\n                    newBoard.robots = newBoard.robots.filter(robot => robot.handle !== handle);\n                }\n                break;\n            }\n            default:\n            // aaaaaaaaa\n        }\n    });\n};\n\nconst directionToCoordinates = direction => {\n    // [dx, dy]\n    switch (direction) {\n        case MOVE.DIRECTION.N:\n            return [0, -1];\n        case MOVE.DIRECTION.NE:\n            return [1, -1];\n        case MOVE.DIRECTION.NW:\n            return [-1, -1];\n        case MOVE.DIRECTION.S:\n            return [0, 1];\n        case MOVE.DIRECTION.SE:\n            return [1, 1];\n        case MOVE.DIRECTION.SW:\n            return [-1, 1];\n        case MOVE.DIRECTION.E:\n            return [1, 0];\n        case MOVE.DIRECTION.W:\n            return [-1, 0];\n        default:\n            return [0, 0]; // ??????\n    }\n};\n\n/**\n * Convert a board move to a *concise* string representation that can be shown to the user.\n *\n * @param move The move data.\n * @return {string} The string representation.\n */\nexport const moveToString = move => JSON.stringify(move); // TODO: implement this\n\nexport const adjustXY = (width, height) => {\n    return ([x, y]) => [];\n};","import {arrayBufferToString} from \"../util\";\nimport {actionChannel, call, put, race, take, select} from \"redux-saga/effects\";\n\nexport const Action = {\n    SEQUENTIAL_MOVE_ACTION: \"SMOVE\",\n    SEQUENTIAL_MOVE_CYCLE: \"SMOVE_CYCLE\",\n    SEQUENTIAL_MOVE_CYCLE_STOP: \"SMOVE_CYCLE_STOP\",\n    MOVE_ACTION: \"MOVE\",\n    LOAD_FILE_ACTION: \"LOAD_FILE\"\n};\n\nconst wait = ms => {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(), ms);\n    });\n};\n\nexport function* animateSaga() {\n    const channel = yield actionChannel(Action.SEQUENTIAL_MOVE_CYCLE);\n    while (yield take(channel)) {\n        while (true) {\n            const outOfMoves = yield select(state => state.board.nextMove >= state.board.moves.length),\n                delay = yield select(state => state.gameStatus.playDelay);\n\n            const {stopped} = yield race({\n                wait: call(wait, delay),\n                stopped: take(Action.SEQUENTIAL_MOVE_CYCLE_STOP)\n            });\n\n            if (!stopped && !outOfMoves) {\n                yield put(runSequentialMove());\n            } else {\n                if (outOfMoves) yield put(stopGame());\n                break;\n            }\n        }\n    }\n}\n\nexport function runSequentialMove(next = true) {\n    return {\n        type: Action.SEQUENTIAL_MOVE_ACTION,\n        payload: {next}\n    };\n}\n\nexport function playGame() {\n    return {\n        type: Action.SEQUENTIAL_MOVE_CYCLE\n    };\n}\n\nexport function stopGame() {\n    return {\n        type: Action.SEQUENTIAL_MOVE_CYCLE_STOP\n    };\n}\n\nexport function loadFile(file) {\n    const fileReadHandle = new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            const text = reader.result instanceof ArrayBuffer ? arrayBufferToString(reader.result) : reader.result;\n            resolve(JSON.parse(text));\n        };\n        reader.onerror = () => reject();\n        reader.readAsBinaryString(file);\n    });\n\n    return {\n        type: Action.LOAD_FILE_ACTION,\n        payload: fileReadHandle\n    }\n}","import {fulfilled, processMove, TILE} from \"../util\";\nimport {Action} from \"../actions\";\n\n// TODO: document board object schema\n\nconst initialState = {\n    // map: [],\n    // maxGold: 0,\n    // maxBots: 0,\n    // width: 0,\n    // height: 0,\n    // teams: [],\n    // teamNames: [],\n    // bases: {},\n    // robots: {}\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case fulfilled(Action.LOAD_FILE_ACTION): {\n            // load new map\n            const {map, width, height, teams, max_gold: maxGold, max_bots: maxBots, moves} = action.payload,\n                squaredMap = squarify(map, height, width),\n                bases = getBases(squaredMap),\n                teamsWithScores = {};\n            teams.forEach(team => teamsWithScores[team] = 0);\n            return {\n                map: squaredMap,\n                maxGold,\n                maxBots,\n                width,\n                height,\n                teams: teamsWithScores,\n                teamNames: teams,\n                bases,\n                robots: [], // no robots at the start\n                moves,\n                nextMove: 0\n            };\n        }\n        case Action.MOVE_ACTION:\n            // make a move!\n            const {forward, move} = action.payload;\n            return processMove(state, move, forward);\n        case Action.SEQUENTIAL_MOVE_ACTION:\n            const {next: nextOrPrevious} = action.payload,\n                {moves, nextMove} = state;\n            const moveToExecute = nextOrPrevious ? moves[nextMove] : moves[nextMove - 1],\n                newState = {\n                    ...state,\n                    moves: state.moves,\n                    nextMove: nextOrPrevious ? nextMove + 1 : nextMove -1 // mfw\n                };\n            return processMove(newState, moveToExecute, nextOrPrevious);\n        default:\n            return state\n    }\n}\n\n/**\n * Get all the team home base locations from a map.\n *\n * @param map The map.\n * @return An object mapping team names to home base locations.\n */\nconst getBases = map => {\n    const bases = {};\n    for (let i = 0; i < map.length; i++) {\n        const row = map[i];\n        for (let j = 0; j < row.length; j++) {\n            const elem = row[j];\n            if (elem.type === TILE.BASE) {\n                bases[elem.team] = [j,i];\n            }\n        }\n    }\n    return bases;\n};\n\n/**\n * Convert a 1-dimensional representation with a given width into a 2-dimensional representation. Note that the mapping\n * goes row-by-row, not column-by-column, i.e. if the width is {@code n}, then the first {@code n} cells represent the\n * first row of the 2D representation.\n *\n * @param map The array.\n * @param height The height of the 2D representation.\n * @param width The width of the 2D representation.\n * @return {Array} The 2D representation.\n */\nconst squarify = (map, height, width) => {\n    const squareMap = [];\n    let row = 0, column = 0;\n    for (let i = 0; i < map.length; i++) {\n        if (squareMap[row] === void 0) {\n            squareMap[row] = [];\n        }\n        squareMap[row][column] = map[i];\n\n        // if (column < width - 1) {\n        //     column++;\n        // } else {\n        //     column = 0;\n        //     row++;\n        // }\n        if (row < height - 1) {\n            row++;\n        } else {\n            column++;\n            row = 0;\n        }\n    }\n    return squareMap;\n};","import produce from 'immer';\n\nimport {fulfilled} from \"../util\";\nimport {Action} from \"../actions\";\n\nconst initialState = {\n    initialized: false,\n    play: false,\n    playDelay: 300 // TODO: create an action that modifies this and hook it up to the UI\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case fulfilled(Action.LOAD_FILE_ACTION):\n            return produce(state, draft => {\n                draft.initialized = true;\n            });\n        case Action.SEQUENTIAL_MOVE_CYCLE:\n            return produce(state, draft => {\n                draft.play = true;\n            });\n        case Action.SEQUENTIAL_MOVE_CYCLE_STOP:\n            return produce(state, draft => {\n                draft.play = false;\n            });\n        default:\n            return state;\n    }\n};","import {combineReducers} from 'redux';\nimport boardReducer from \"./boardReducer\";\nimport gameStatusReducer from \"./gameStatusReducer\";\n\nconst rootReducer = combineReducers({\n    board: boardReducer,\n    gameStatus: gameStatusReducer\n});\n\nexport default rootReducer;","import React, {Component} from 'react';\n\nexport default class FieldFileInput extends Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        const { onChange } = this.props,\n            file = e.target.files[0];\n        // console.log(file);\n        onChange(file);\n    }\n\n    render() {\n        const { label, types } = this.props;\n        return (\n            <div>\n                <div id=\"section-head\">{label}</div>\n                <div>\n                    <input\n                        type='file'\n                        accept={types}\n                        onChange={this.onChange}\n                    />\n                </div>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport FieldFileInput from \"../../FieldFileInput\";\nimport {loadFile} from \"../../actions\";\nimport {bindActionCreators} from \"redux\";\n\nimport \"./style.css\";\n\nclass Header extends Component {\n    render() {\n        /*  teams: a list of all the teams\n            scores: a list of the current scores for each team in order of the teams list\n            bots: a list of num of bots for the teams in order of teams list\n            goldcap: an int that represents the gold cap per bot\n            moves: all moves\n            next: next index of move\n        */\n        const {teamNames, teams, maxGold, moves, nextMove} = this.props;\n        const input = <FieldFileInput className=\"header-item\"\n                                      label={\"Import\"}\n                                      types={\".json\"}\n                                      onChange={this.props.loadFile}/>;\n        if (teamNames === void 0) {\n            return (\n                <div id=\"header-container\">\n                    {input}\n                </div>\n            );\n        }\n        return (\n            <div id=\"header-container\">\n                {input}\n                <div className=\"header-item\" id=\"Score\">\n                    <div className=\"section-head\" key={-1}>Scores</div>\n\n                    {Object.keys(teams).map((team, i) =>\n                        <div className=\"score-item\" key={i}>\n                            Team {team}: {teams[team]}\n                        </div>\n                    )}\n                </div>\n\n                {/* <div className=\"header-item\" id=\"NumBots\">{numBots}</div> */}\n                <div className=\"header-item\" id=\"MovesLeft\">\n                    <div className=\"section-head\" key={\"gold\"}>Gold Cap: {maxGold}</div>\n                    <div className=\"section-head\" key={\"move-head\"}>Moves: {nextMove} / {moves.length}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({board: {teamNames, maxGold, maxBots, teams, robots, moves, nextMove}}) => {\n    return {\n        teamNames, teams, robots, maxGold, maxBots, moves, nextMove\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return bindActionCreators({\n        loadFile\n    }, dispatch);\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React, {Component} from \"react\";\nimport TableDragSelect from \"react-table-drag-select\";\nimport \"react-table-drag-select/style.css\";\nimport {TILE} from \"../../util\";\nimport classNames from 'classnames';\nimport \"./style.css\";\nimport { saveAs } from 'file-saver';\n\nclass EditorGrid extends Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            width: 30,\n            height: 5,\n            cells: this.initCells(30, 5), \n            selectedItem: \"gold\",\n            grid: this.initGrids(30, 5),\n            lastgrid: this.initGrids(30,5),\n            editTile: null,\n            max_gold: 10,\n            max_bots: 4,\n            vision: 2,\n            show: false,\n            end_goal: 50,\n            max_moves: 300\n        }\n    }\n\n    showEditor = () => {\n        this.setState({\n            show: !this.state.show\n        })\n    }\n\n    inBounds(pos) {\n        if (pos[0] >= 0 && pos[0] < this.state.width && \n            pos[1] >= 0 && pos[1] < this.state.height) {\n            return true;\n        }\n        return false;\n    }\n\n    changeParams = (field, newValue) => {\n        if (newValue > 0) {\n            if (field === 'width') {\n                let newCells = this.initCells(newValue, this.state.height);\n                this.setState({\n                    width: newValue,\n                    cells: newCells,\n                    grid: this.initGrids(newValue, this.state.height),\n                    lastgrid: this.initGrids(newValue, this.state.height)\n                });\n                this.forceUpdate()\n            } else if (field === 'height') {\n                let newCells = this.initCells(this.state.width, newValue);\n                this.setState({\n                    height: newValue,\n                    cells: newCells,\n                    grid: this.initGrids(this.state.width, newValue),\n                    lastgrid: this.initGrids(this.state.width, newValue)\n                })\n                this.forceUpdate();\n            } else if (field === 'vision') {\n                this.setState({\n                    vision: newValue\n                })\n            } else if (field === 'max_gold') {\n                this.setState({\n                    max_gold: newValue\n                })\n            } else if (field === 'max_bots') {\n                this.setState({\n                    max_bots: newValue\n                })\n            } else if (field === 'end_goal') {\n                this.setState({\n                    end_goal: newValue\n                })\n            } else if (field === 'max_moves') {\n                this.setState({\n                    max_moves: newValue\n                })\n            }\n        }\n    }\n\n    initCells(w, h) {\n        let cells = [];\n        for (let y = 0; y < h; y++) {\n            let row = []\n            for (let x = 0; x < w; x++) {\n                row.push(false);\n            }\n            cells.push(row);\n        }\n        return cells;\n    }\n\n    initGrids(w, h) {\n        let cells = [];\n        for (let y = 0; y < h; y++) {\n            let row = []\n            for (let x = 0; x < w; x++) {\n                row.push({\n                    type: TILE.PATH,\n                    cost: 5\n                });\n            }\n            cells.push(row);\n        }\n        return cells;\n    }\n\n    generateTable(cells) {\n        let width = cells[0].length;\n        let height = cells.length;\n        let table = []\n        for (let y = 0; y < height; y++) {\n            let row = []\n            for (let x = 0; x < width; x++) {\n                let currx = x;\n                let curry = y;\n                let cell = this.state.grid[curry][currx];\n                if (cell.type === TILE.PATH) {\n                    row.push(\n                        <td className={classNames('grid', 'path')}\n                         key={currx + \"|\" + curry}>\n                        {/* {this.state.grid[curry][currx].cost} */}\n                        </td>\n                    );\n                } else if (cell.type === TILE.WALL) {\n                    row.push(\n                        <td className={classNames('grid', 'wall')}\n                         key={currx + \"|\" + curry}>\n                        </td>\n                    );\n                } else if (cell.type === TILE.GOLD) {\n                    row.push(\n                        <td className={classNames('grid', 'gold')}\n                         key={currx + \"|\" + curry}>\n                         {this.state.grid[curry][currx].amount}\n                        </td>\n                    );\n                } else if (cell.type === TILE.WORM) {\n                    row.push(\n                        <td className={classNames('grid', 'worm')}\n                         key={currx + \"|\" + curry}>\n                        </td>\n                    );\n                } else if (cell.type === TILE.BASE) {\n                    row.push(\n                        <td className={\n                            classNames('grid', \n                            cell.team === \"Blue\" ? 'base-blue' : 'base-red')}\n                         key={currx + \"|\" + curry}>\n                        </td>\n                    );\n                } \n                \n            }\n            table.push(<tr key={y}>{row}</tr>);\n        }\n        return table;\n    }\n\n    updateEditResult = (pos, field, newValue) => {\n        let newGrid = this.state.grid;\n        let x = pos[0];\n        let y = pos[1];\n        if (field === 'cost') {\n            newGrid[y][x] = {\n                type: TILE.PATH,\n                cost: newValue\n            }\n        } else if (field === 'amount' && newValue < 10 && newValue > 0) {\n            newGrid[y][x] = {\n                type: TILE.GOLD,\n                amount: newValue\n            }\n        } else if (field === 'x') {\n            let outy = newGrid[y][x].out[1];\n            newGrid[y][x] = {\n                type: TILE.WORM,\n                out: [newValue, outy]\n            }\n        } else if (field === 'y') {\n            let outx = newGrid[y][x].out[0];\n            newGrid[y][x] = {\n                type: TILE.WORM,\n                out: [outx, newValue]\n            }\n        }\n\n        this.setState({\n            grid: newGrid\n        });\n\n        \n    }\n\n    generateEditItem = () => {\n        const pos = this.state.editTile;\n        let form = <p>This tile is not editable.</p>;\n        if (pos !== null && pos !== undefined && this.inBounds(pos)) {\n            const tile = this.state.grid[pos[1]][pos[0]];\n            // if (tile.type === TILE.PATH) {\n            //     form = \n            //         <div className=\"edit-item\">\n            //         <div className=\"edit-item-label\">Cost: </div>\n            //         <input \n            //         key={0}\n            //         type=\"number\" \n            //         value={this.state.grid[pos[1]][pos[0]].cost}\n            //         onChange={(e)=>this.updateEditResult(\n            //             pos, 'cost',\n            //             Number(e.target.value))}\n            //         />\n            //         </div>\n            // } else \n            if (tile.type === TILE.GOLD) {\n                form = \n                    <div className=\"edit-item\">\n                    <div className=\"edit-item-label\">Amount: </div>\n                    <input \n                    key={1}\n                    type=\"number\" \n                    value={this.state.grid[pos[1]][pos[0]].amount}\n                    onChange={(e)=>this.updateEditResult(\n                        pos, 'amount',\n                        Number(e.target.value))}\n                    />\n                    <p>Note: Gold tiles can only have amounts between 1 ~ 9</p>\n                    </div>\n            } \n            // else if (tile.type === TILE.WORM) {\n            //     form = \n            //         <div className=\"edit-item\">\n            //         <div className=\"edit-item-label\">To Position X: </div>\n            //         <input \n            //         type=\"number\" \n            //         key={2}\n            //         value={this.state.grid[pos[1]][pos[0]].out[0]}\n            //         onChange={(e)=>this.updateEditResult(\n            //             pos, 'x',\n            //             Number(e.target.value))} />\n            //         <div className=\"edit-item-label\">Y: </div>\n            //         <input \n            //         type=\"number\" \n            //         key={3}\n            //         value={this.state.grid[pos[1]][pos[0]].out[1]}\n            //         onChange={(e)=>this.updateEditResult(\n            //             pos, 'y',\n            //             Number(e.target.value))} />\n            //         <p>Note: Bottom left grid is (0,0)</p>\n            //         <p>Out position must be a Path.</p>\n            //         </div>\n            // }\n        }\n        return form;\n        \n    }\n\n    reset = () => {\n        let init_cells = this.initCells(this.state.width, this.state.height);\n        let newLastGrid = this.state.grid.map(arr => arr.slice(0));\n        this.setState({\n            cells: init_cells, \n            lastgrid: newLastGrid\n        })\n    }\n\n    changeSelectedItem = (type) => {\n        this.reset();\n        this.setState({\n            selectedItem: type,\n            editTile: null\n        })\n    }\n\n    generateToolBox = () => {\n        let lst = [];\n        let items = [\"path\", \"base-blue\", \"base-red\", \"gold\", \"edit\", \"done\"];\n        // let items = [\"path\", \"wall\", \"base-red\", \"base-blue\", \"worm\", \"gold\", \"edit\", \"done\"];\n        for (let i = 0; i < items.length; i++) {\n            let type = items[i];\n            lst.push(\n                <div \n                key={i}\n                className={classNames(\n                    type,\n                    \"tool-item\",\n                    this.state.selectedItem === items[i] ? \"selected\" : \"not-selected\"\n                )}\n                onClick={(e) => this.changeSelectedItem(type)}></div>\n            );\n        }\n        return lst;\n    }\n\n    getDifference = (cells1, cells2) => {\n        let newCells = this.initCells(this.state.width, this.state.height);\n        for (let y = 0; y < this.state.height; y++) {\n            for (let x = 0; x < this.state.width; x++) {\n                if (cells1[y][x] !== cells2[y][x]) {\n                    newCells[y][x] = true;\n                    break;\n                }\n            }\n        }\n        return newCells;\n    }\n\n\n    updateGrid = (cells) => {\n        let newGrids = this.state.grid;\n        if (this.state.selectedItem === 'edit') {\n            cells = this.getDifference(cells, this.state.cells);\n        }\n\n        for (let y = 0; y < cells.length; y++) {\n            for (let x = 0; x < cells[y].length; x++) {\n                if (cells[y][x] === true) {\n                    if (this.state.selectedItem === \"path\") {\n                        newGrids[y][x] = {\n                            type: TILE.PATH,\n                            cost: 10,\n                        }\n                    } else if (this.state.selectedItem === \"wall\") {\n                        newGrids[y][x] = {\n                            type: TILE.WALL\n                        }\n                    } else if (this.state.selectedItem === \"base-red\") {\n                        newGrids[y][x] = {\n                            type: TILE.BASE,\n                            team: \"Red\"\n                        }\n                    } else if (this.state.selectedItem === \"base-blue\") {\n                        newGrids[y][x] = {\n                            type: TILE.BASE,\n                            team: \"Blue\"\n                        }\n                    } else if (this.state.selectedItem === \"worm\") {\n                        newGrids[y][x] = {\n                            type: TILE.WORM,\n                            out: [0,0]\n                        }\n                    } else if (this.state.selectedItem === \"gold\") {\n                        newGrids[y][x] = {\n                            type: TILE.GOLD,\n                            amount: 9\n                        }\n                    } else if (this.state.selectedItem === \"edit\") {\n                        //edit\n                        this.setState({\n                            editTile: [x,y]\n                        })\n                    } else if (this.state.selectedItem === \"done\") {\n                        this.setState({\n                            editTile: null,\n                            selectedItem: null\n                        });\n                    }\n                } else {\n                    newGrids[y][x] = this.state.lastgrid[y][x];\n                }\n            }\n        }\n        this.setState({\n            cells: cells,\n            grid: newGrids,\n        });\n\n    }\n\n    tileToJson(tile) {\n        if (tile.type === TILE.WORM) {\n            return {\n                type: tile.Type,\n                out: [tile.out[0], this.state.height - tile.out[1] - 1]\n            }\n        } else if (tile.type === TILE.PATH) {\n            return {\n                type: tile.type,\n                cost: tile.cost\n            };\n        } else if (tile.type === TILE.GOLD) {\n            return {\n                type: tile.type,\n                amount: tile.amount\n            }\n        } else if (tile.type === TILE.WALL) {\n            return {\n                type: tile.type\n            }\n        } else if (tile.type === TILE.BASE) {\n            return {\n                type: tile.type,\n                team: tile.team\n            }\n        }\n    }\n\n\n    export = () => {\n        let map = [];\n        let redBaseFlag = 0;\n        let blueBaseFlag = 0;\n        for (let x = 0; x < this.state.width; x++) {\n            for (let y = 0; y <this.state.height; y++) {\n                let tile = this.state.grid[y][x]\n                map.push(this.tileToJson(tile));\n                if (tile.type === TILE.BASE) {\n                    if (tile.team === 'Red') {\n                        redBaseFlag += 1;\n                    } else if (tile.team === 'Blue') {\n                        blueBaseFlag += 1;\n                    }\n                }\n                \n            }\n        }\n\n        if (redBaseFlag !== 1 || blueBaseFlag !== 1) {\n            //missing bases\n            console.log(redBaseFlag, blueBaseFlag);\n            alert('Each team must have exactly one homebase.');\n            return;\n        }\n\n        let obj = {\n            width: this.state.width,\n            height: this.state.height,\n            max_gold: this.state.max_gold,\n            max_bots: this.state.max_bots,\n            end_goal: this.state.end_goal,\n            max_moves: this.state.max_moves,\n            teams: [\"Blue\", \"Red\"],\n            vision: 2,\n            map: map,\n            moves: []\n        }\n\n        \n        var fileName = 'map.json';\n        \n        // Create a blob of the data\n        var fileToSave = new Blob([JSON.stringify(obj)], {\n            type: 'application/json',\n            name: fileName\n        });\n        \n        // Save the file\n        saveAs(fileToSave, fileName);\n    }\n\n\n    render() {\n        return (\n            <div id=\"editorContainer\">\n                <div \n                id=\"editContainerContent\" \n                className={this.state.show ? 'editorContent' : 'disabled'}>\n                    <div id=\"editorHeader\">\n                        <div className='input-item'>\n                            <div className=\"label\">Width: </div>\n                            <input \n                            type=\"number\" name=\"width\" \n                            value={this.state.width} \n                            onChange={(e) => this.changeParams('width',Number(e.target.value))}></input>\n                        </div>\n                        <div className='input-item'>\n                            <div className=\"label\">Height: </div>\n                            <input \n                            type=\"number\" name=\"height\" \n                            value={this.state.height}\n                            onChange={(e) => this.changeParams('height',Number(e.target.value))}></input>\n                        </div>\n                        <div className='input-item'>\n                            <div className=\"label\">Vision: </div>\n                            <input \n                            type=\"number\" name=\"vision\" \n                            value={this.state.vision}\n                            onChange={(e) => this.changeParams('vision',Number(e.target.value))}></input>\n                        </div>\n                        <div className='input-item'>\n                            <div className=\"label\">Gold Cap: </div>\n                            <input \n                            type=\"number\" name=\"max_gold\" \n                            value={this.state.max_gold}\n                            onChange={(e) => this.changeParams('max_gold',Number(e.target.value))}></input>\n                        </div>\n                        <div className='input-item'>\n                            <div className=\"label\">Bot Cap: </div>\n                            <input \n                            type=\"number\" name=\"max_bots\" \n                            value={this.state.max_bots}\n                            onChange={(e) => this.changeParams('max_bots',Number(e.target.value))}></input>\n                        </div>\n                        <div className='input-item'>\n                            <div className=\"label\">End Goal: </div>\n                            <input \n                            type=\"number\" name=\"end_goal\" \n                            value={this.state.end_goal}\n                            onChange={(e) => this.changeParams('end_goal',Number(e.target.value))}></input>\n                        </div>\n                        <div className='input-item'>\n                            <div className=\"label\">Max Moves: </div>\n                            <input \n                            type=\"number\" name=\"max_moves\" \n                            value={this.state.max_moves}\n                            onChange={(e) => this.changeParams('max_moves',Number(e.target.value))}></input>\n                        </div>\n                    </div>\n                    <TableDragSelect\n                    value={this.state.cells}\n                    onChange={cells => this.updateGrid(cells)}\n                    >\n                    {this.generateTable(this.state.cells)}\n                    </TableDragSelect>\n                    <br/>\n                    <div id=\"toolBox\">\n                        <div className=\"label\">Tools: </div>\n                        {this.generateToolBox()}\n                    </div>\n                    <br />\n                    <div id=\"editorBox\" className={this.state.editTile === null ? 'disabled' : 'not-disabled'}>\n                        <div className=\"label\">Edit: </div>\n                        {this.generateEditItem()}\n                    </div>\n                    <br />\n                    <div id=\"export\">\n                    <button className=\"cool-button\" onClick={(e) => this.export()}>Export</button>\n                    </div>\n                </div>\n                <br/>\n                <button className=\"cool-button\" onClick={(e) => this.showEditor()}>\n                {this.state.show ? 'Hide Editor' : 'Show Editor'}\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default EditorGrid;","import React from 'react';\nimport \"../style.css\";\nimport {TILE} from \"../../../../util\";\n\nimport redBot from '../red_robot_128.svg';\nimport blueBot from '../blue_robot_128.svg';\n\nexport default ({tile, robots}) => {\n    const style = {};\n    \n    let type = tile.type;\n    if (type === TILE.BASE) {\n        style[\"border\"] = `1px solid ${tile.team.toLowerCase()}`; // TODO make this nicer!\n    }\n\n    let contents = \"\";\n    if (type === TILE.GOLD) {\n        if (tile.amount === 0) {\n            //no gold left, switch to path\n            tile = {\n                type: TILE.PATH,\n                cost: 5\n            };\n            type = TILE.PATH;\n        } else {\n            contents = tile.amount;\n        }\n        \n    }\n    \n    // show cost of path\n    // if (type === TILE.PATH) {\n    //     contents = tile.cost;\n    // }\n\n    const bots = robots.map(({team, handle}) => {\n        if (team === \"Red\") {\n            return <img key={'red'+handle} className=\"bot-img\" src={redBot} alt=\"RBot\" />;\n        } else if (team === \"Blue\") {\n            return <img key={'blue'+handle} className=\"bot-img\" src={blueBot} alt=\"BBot\" />;\n        } else {\n            return null; // >:(\n        }\n    });\n\n    let typeClass = \"path\";\n    if (type === TILE.GOLD) {\n        typeClass = \"gold\";\n    } else if (type === TILE.BASE) {\n        typeClass = \"base\";\n    } else if (type === TILE.WORM) {\n        typeClass = \"worm\";\n    } else if (type === TILE.WALL) {\n        typeClass = \"wall\"\n    }\n\n\n    return (\n        <div style={style} className={`map-tile ${typeClass}`}>\n            {contents}\n            {bots}\n        </div>\n    )\n}","import React from 'react';\n\nimport MapTile from \"./MapTile\";\nimport \"./style.css\";\n\nexport default ({tiles, robots, y}) => {\n    const robotsByTile = Array(tiles.length);\n    for (let i = 0; i < tiles.length; i++) robotsByTile[i] = [];\n    robots.forEach(robot => {\n        const {xy: [x, ]} = robot;\n        robotsByTile[x].push(robot);\n    });\n    return (\n        <div className=\"map-row\">\n            {tiles.map((tile, index) =>\n                <MapTile key={index} tile={tile} robots={robotsByTile[index]} x={index} y={y}/>\n            )}\n        </div>\n    )\n}","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport MapRow from \"./MapRow\";\n\nclass MapContainer extends Component {\n    render() {\n        const { map, width, height, teams, bases, robots } = this.props;\n        if (map == null) { // double equals is intentional here, please don't change this\n            return (\n                <div id=\"map-container\">\n\n                </div>\n            )\n        }\n\n        const robotsByRow = Array(height);\n        for (let i = 0; i < height; i++) robotsByRow[i] = []; // have to do this manually as [] is an object\n        robots.forEach(robot => {\n            const {xy: [, y]} = robot;\n            robotsByRow[y].push(robot);\n        });\n\n        const rows = map.map((mapRow, index) => {\n            return <MapRow tiles={mapRow} key={index} robots={robotsByRow[index]} y={index}/>\n        });\n\n        return (\n            <div id=\"map-container\">\n                {rows}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({board: {map, width, height, teams, bases, robots}}) => {\n    return {\n        map, width, height, teams, bases, robots\n    };\n};\n\nexport default connect(mapStateToProps)(MapContainer);","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport {connect} from 'react-redux';\n\nimport {moveToString} from \"../../util\";\nimport \"./style.css\";\n\n\nclass MovesListContainer extends Component {\n    render() {\n        const {moves, nextMove} = this.props;\n        if (moves == null) { // double equals is intentional here, please don't change this\n            return (\n                <div id=\"moves-container\">\n\n                </div>\n            )\n        }\n\n        const movesList = moves.map((move, index) => {\n            const classes = classNames({\n                \"move-element\": true,\n                \"past-move\": index < nextMove,\n                \"next-move\": index === nextMove\n            });\n\n            if (index < nextMove) {\n                // don't render past moves :(\n                return null;\n            } else {\n                return <p key={index} className={classes}>{moveToString(move)}</p>\n            }\n        }).filter(elem => elem !== null);\n\n        return (\n            <div id=\"moves-container\">\n                {movesList}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({board: {moves, nextMove}}) => {\n    return {\n        moves, nextMove\n    };\n};\n\nexport default connect(mapStateToProps)(MovesListContainer);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport './App.css';\nimport Header from './Header';\nimport EditorGrid from './EditorGrid';\nimport MapContainer from \"./MapContainer\";\nimport MovesListContainer from \"./MovesListContainer\";\nimport {bindActionCreators} from \"redux\";\nimport {playGame, runSequentialMove, stopGame} from \"../actions\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n\n        };\n    }\n\n    render() {\n        let {height, nextMove, totalMoves, initialized, play} = this.props;\n        if (height === void 0) {\n            height = 0;\n        }\n\n        return (\n            <div className=\"App\">\n                <Header/>\n                {/* style={{height: 52 * height}} */}\n                <div id=\"data\" style={{height: 32 * height}}>\n                    <div style={{flex: 2}}>\n                        <MapContainer/>\n                    </div>\n                    <div style={{flex: \"1\", overflowY: \"scroll\", overflowX: \"scroll\"}}>\n                        <MovesListContainer/>\n                    </div>\n                    <br/>\n                </div>\n                {initialized &&\n                    <div id=\"buttons\">\n                        <button className=\"cool-button\" onClick={() => this.props.runSequentialMove(false)}\n                                disabled={play || nextMove === 0}>Previous Move</button>\n\n                        <button className=\"cool-button\" onClick={() => this.props.stopGame()}\n                                disabled={!play}>Stop</button>\n\n                        <button className=\"cool-button\" onClick={() => this.props.playGame()}\n                                disabled={play}>Play</button>\n\n                        <button className=\"cool-button\" onClick={() => this.props.runSequentialMove(true)}\n                                disabled={play || nextMove >= totalMoves}>Next Move</button>\n                    </div>\n                }\n\n                <br/>\n                <EditorGrid/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({board: {height, nextMove, moves}, gameStatus: {initialized, play}}) => {\n    const totalMoves = typeof moves === \"undefined\" ? 0 : moves.length;\n    return {height, nextMove, totalMoves, initialized, play};\n};\n\n// for testing\n// TODO: remove this when done\nconst mapDispatchToProps = dispatch => {\n    return bindActionCreators({\n        playGame,\n        stopGame,\n        runSequentialMove\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {applyMiddleware, createStore} from 'redux';\nimport ReduxPromise from \"redux-promise-middleware\";\nimport createSagaMiddleware from \"redux-saga\";\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nimport reducers from './reducers';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {animateSaga} from \"./actions\";\n\nconst Saga = createSagaMiddleware();\nconst store = createStore(reducers, composeWithDevTools(\n    applyMiddleware(ReduxPromise, Saga),\n    // other store enhancers if any\n));\n\nSaga.run(animateSaga);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}